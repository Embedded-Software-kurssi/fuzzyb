
fuzzyB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f0  00800100  00001b64  00001bf8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  008001f0  008001f0  00001ce8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ce8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00001d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000176d  00000000  00000000  00001dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007fd  00000000  00000000  00003569  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000889  00000000  00000000  00003d66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000334  00000000  00000000  000045f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000569  00000000  00000000  00004924  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d55  00000000  00000000  00004e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00005be2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e6       	ldi	r30, 0x64	; 100
      7c:	fb e1       	ldi	r31, 0x1B	; 27
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 3f       	cpi	r26, 0xF0	; 240
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a0 ef       	ldi	r26, 0xF0	; 240
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ae 30       	cpi	r26, 0x0E	; 14
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 de 06 	call	0xdbc	; 0xdbc <main>
      9e:	0c 94 53 00 	jmp	0xa6	; 0xa6 <exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <exit>:
    struct rule_element_type *next;
};
struct rule_type *Rule_Base;
void exit(int x)
{
    while (1);
      a6:	ff cf       	rjmp	.-2      	; 0xa6 <exit>

000000a8 <rule_evaluation>:
	for (mf = si->membership_functions; mf != NULL; mf = mf->next)
	    compute_degree_of_membership(mf, si->value);
} /* END FUZZIFICATION */

void rule_evaluation()
{
      a8:	cf 92       	push	r12
      aa:	df 92       	push	r13
      ac:	ef 92       	push	r14
      ae:	ff 92       	push	r15
      b0:	0f 93       	push	r16
      b2:	1f 93       	push	r17
      b4:	cf 93       	push	r28
      b6:	df 93       	push	r29
    struct rule_type *rule;
    struct rule_element_type *ip; /* if ptr */
    struct rule_element_type *tp; /* then ptr */
    int strength;
    int nomatch = 0; /* NEW, test some rules */
    for (rule = Rule_Base; rule != NULL; rule = rule->next)
      b8:	c0 91 02 02 	lds	r28, 0x0202	; 0x800202 <Rule_Base>
      bc:	d0 91 03 02 	lds	r29, 0x0203	; 0x800203 <Rule_Base+0x1>
      c0:	20 97       	sbiw	r28, 0x00	; 0
      c2:	09 f4       	brne	.+2      	; 0xc6 <rule_evaluation+0x1e>
      c4:	44 c0       	rjmp	.+136    	; 0x14e <rule_evaluation+0xa6>
      c6:	20 e0       	ldi	r18, 0x00	; 0
      c8:	30 e0       	ldi	r19, 0x00	; 0
    {
	strength = UPPER_LIMIT;
      ca:	cc 24       	eor	r12, r12
      cc:	ca 94       	dec	r12
      ce:	d1 2c       	mov	r13, r1
	    strength = min(strength, *(ip->value));
	for (tp = rule->then_side; tp != NULL; tp = tp->next)
	{
	    *(tp->value) = max(strength, *(tp->value)); /* NEW */
	    if (strength > 0)
		nomatch = 1; /* NEW */
      d0:	ee 24       	eor	r14, r14
      d2:	e3 94       	inc	r14
      d4:	f1 2c       	mov	r15, r1
    int strength;
    int nomatch = 0; /* NEW, test some rules */
    for (rule = Rule_Base; rule != NULL; rule = rule->next)
    {
	strength = UPPER_LIMIT;
	for (ip = rule->if_side; ip != NULL; ip = ip->next)
      d6:	e8 81       	ld	r30, Y
      d8:	f9 81       	ldd	r31, Y+1	; 0x01
      da:	30 97       	sbiw	r30, 0x00	; 0
      dc:	81 f0       	breq	.+32     	; 0xfe <rule_evaluation+0x56>
      de:	8c 2d       	mov	r24, r12
      e0:	9d 2d       	mov	r25, r13
	    strength = min(strength, *(ip->value));
      e2:	a0 81       	ld	r26, Z
      e4:	b1 81       	ldd	r27, Z+1	; 0x01
      e6:	4d 91       	ld	r20, X+
      e8:	5c 91       	ld	r21, X
      ea:	48 17       	cp	r20, r24
      ec:	59 07       	cpc	r21, r25
      ee:	0c f4       	brge	.+2      	; 0xf2 <rule_evaluation+0x4a>
      f0:	ca 01       	movw	r24, r20
    int strength;
    int nomatch = 0; /* NEW, test some rules */
    for (rule = Rule_Base; rule != NULL; rule = rule->next)
    {
	strength = UPPER_LIMIT;
	for (ip = rule->if_side; ip != NULL; ip = ip->next)
      f2:	02 80       	ldd	r0, Z+2	; 0x02
      f4:	f3 81       	ldd	r31, Z+3	; 0x03
      f6:	e0 2d       	mov	r30, r0
      f8:	30 97       	sbiw	r30, 0x00	; 0
      fa:	99 f7       	brne	.-26     	; 0xe2 <rule_evaluation+0x3a>
      fc:	02 c0       	rjmp	.+4      	; 0x102 <rule_evaluation+0x5a>
    struct rule_element_type *tp; /* then ptr */
    int strength;
    int nomatch = 0; /* NEW, test some rules */
    for (rule = Rule_Base; rule != NULL; rule = rule->next)
    {
	strength = UPPER_LIMIT;
      fe:	8c 2d       	mov	r24, r12
     100:	9d 2d       	mov	r25, r13
	for (ip = rule->if_side; ip != NULL; ip = ip->next)
	    strength = min(strength, *(ip->value));
	for (tp = rule->then_side; tp != NULL; tp = tp->next)
     102:	ea 81       	ldd	r30, Y+2	; 0x02
     104:	fb 81       	ldd	r31, Y+3	; 0x03
     106:	30 97       	sbiw	r30, 0x00	; 0
     108:	d9 f0       	breq	.+54     	; 0x140 <rule_evaluation+0x98>
	{
	    *(tp->value) = max(strength, *(tp->value)); /* NEW */
     10a:	08 2f       	mov	r16, r24
     10c:	19 2f       	mov	r17, r25
     10e:	a0 81       	ld	r26, Z
     110:	b1 81       	ldd	r27, Z+1	; 0x01
     112:	4d 91       	ld	r20, X+
     114:	5c 91       	ld	r21, X
     116:	11 97       	sbiw	r26, 0x01	; 1
     118:	70 2f       	mov	r23, r16
     11a:	61 2f       	mov	r22, r17
     11c:	84 17       	cp	r24, r20
     11e:	95 07       	cpc	r25, r21
     120:	14 f4       	brge	.+4      	; 0x126 <rule_evaluation+0x7e>
     122:	74 2f       	mov	r23, r20
     124:	65 2f       	mov	r22, r21
     126:	7c 93       	st	X, r23
     128:	11 96       	adiw	r26, 0x01	; 1
     12a:	6c 93       	st	X, r22
	    if (strength > 0)
     12c:	18 16       	cp	r1, r24
     12e:	19 06       	cpc	r1, r25
     130:	14 f4       	brge	.+4      	; 0x136 <rule_evaluation+0x8e>
		nomatch = 1; /* NEW */
     132:	2e 2d       	mov	r18, r14
     134:	3f 2d       	mov	r19, r15
    for (rule = Rule_Base; rule != NULL; rule = rule->next)
    {
	strength = UPPER_LIMIT;
	for (ip = rule->if_side; ip != NULL; ip = ip->next)
	    strength = min(strength, *(ip->value));
	for (tp = rule->then_side; tp != NULL; tp = tp->next)
     136:	02 80       	ldd	r0, Z+2	; 0x02
     138:	f3 81       	ldd	r31, Z+3	; 0x03
     13a:	e0 2d       	mov	r30, r0
     13c:	30 97       	sbiw	r30, 0x00	; 0
     13e:	39 f7       	brne	.-50     	; 0x10e <rule_evaluation+0x66>
    struct rule_type *rule;
    struct rule_element_type *ip; /* if ptr */
    struct rule_element_type *tp; /* then ptr */
    int strength;
    int nomatch = 0; /* NEW, test some rules */
    for (rule = Rule_Base; rule != NULL; rule = rule->next)
     140:	0c 80       	ldd	r0, Y+4	; 0x04
     142:	dd 81       	ldd	r29, Y+5	; 0x05
     144:	c0 2d       	mov	r28, r0
     146:	20 97       	sbiw	r28, 0x00	; 0
     148:	31 f6       	brne	.-116    	; 0xd6 <rule_evaluation+0x2e>
	    *(tp->value) = max(strength, *(tp->value)); /* NEW */
	    if (strength > 0)
		nomatch = 1; /* NEW */
	}		     /* NEW */
    }
    if (nomatch == 0)
     14a:	23 2b       	or	r18, r19
     14c:	21 f4       	brne	.+8      	; 0x156 <rule_evaluation+0xae>
	printf("NO MATCHING RULES FOUND!\n"); /* NEW */
     14e:	86 e0       	ldi	r24, 0x06	; 6
     150:	91 e0       	ldi	r25, 0x01	; 1
     152:	0e 94 cd 0a 	call	0x159a	; 0x159a <puts>
} /* END RULE EVALUATION */
     156:	df 91       	pop	r29
     158:	cf 91       	pop	r28
     15a:	1f 91       	pop	r17
     15c:	0f 91       	pop	r16
     15e:	ff 90       	pop	r15
     160:	ef 90       	pop	r14
     162:	df 90       	pop	r13
     164:	cf 90       	pop	r12
     166:	08 95       	ret

00000168 <compute_degree_of_membership>:
	so->value = sum_of_products / sum_of_areas;
    }
} /* END DEFUZZIFICATION */

void compute_degree_of_membership(struct mf_type *mf, int input)
{
     168:	8f 92       	push	r8
     16a:	9f 92       	push	r9
     16c:	af 92       	push	r10
     16e:	bf 92       	push	r11
     170:	cf 92       	push	r12
     172:	df 92       	push	r13
     174:	ef 92       	push	r14
     176:	ff 92       	push	r15
     178:	0f 93       	push	r16
     17a:	1f 93       	push	r17
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	fc 01       	movw	r30, r24
     182:	cb 01       	movw	r24, r22
    int delta_1, delta_2;
    delta_1 = input - mf->point1;
     184:	24 85       	ldd	r18, Z+12	; 0x0c
     186:	35 85       	ldd	r19, Z+13	; 0x0d
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
    delta_2 = mf->point2 - input;
     18c:	06 85       	ldd	r16, Z+14	; 0x0e
     18e:	17 85       	ldd	r17, Z+15	; 0x0f
     190:	08 1b       	sub	r16, r24
     192:	19 0b       	sbc	r17, r25
    if ((delta_1 <= 0) || (delta_2 <= 0))
     194:	16 16       	cp	r1, r22
     196:	17 06       	cpc	r1, r23
     198:	1c f4       	brge	.+6      	; 0x1a0 <compute_degree_of_membership+0x38>
     19a:	10 16       	cp	r1, r16
     19c:	11 06       	cpc	r1, r17
     19e:	1c f0       	brlt	.+6      	; 0x1a6 <compute_degree_of_membership+0x3e>
	mf->value = 0;
     1a0:	13 86       	std	Z+11, r1	; 0x0b
     1a2:	12 86       	std	Z+10, r1	; 0x0a
     1a4:	3c c0       	rjmp	.+120    	; 0x21e <compute_degree_of_membership+0xb6>
     1a6:	ef 01       	movw	r28, r30
    else
    {
	mf->value = min((mf->slope1 * delta_1), (mf->slope2 * delta_2));
     1a8:	07 2e       	mov	r0, r23
     1aa:	00 0c       	add	r0, r0
     1ac:	88 0b       	sbc	r24, r24
     1ae:	99 0b       	sbc	r25, r25
     1b0:	0e 94 06 08 	call	0x100c	; 0x100c <__floatsisf>
     1b4:	28 89       	ldd	r18, Y+16	; 0x10
     1b6:	39 89       	ldd	r19, Y+17	; 0x11
     1b8:	4a 89       	ldd	r20, Y+18	; 0x12
     1ba:	5b 89       	ldd	r21, Y+19	; 0x13
     1bc:	0e 94 97 08 	call	0x112e	; 0x112e <__mulsf3>
     1c0:	6b 01       	movw	r12, r22
     1c2:	7c 01       	movw	r14, r24
     1c4:	b8 01       	movw	r22, r16
     1c6:	11 0f       	add	r17, r17
     1c8:	88 0b       	sbc	r24, r24
     1ca:	99 0b       	sbc	r25, r25
     1cc:	0e 94 06 08 	call	0x100c	; 0x100c <__floatsisf>
     1d0:	2c 89       	ldd	r18, Y+20	; 0x14
     1d2:	3d 89       	ldd	r19, Y+21	; 0x15
     1d4:	4e 89       	ldd	r20, Y+22	; 0x16
     1d6:	5f 89       	ldd	r21, Y+23	; 0x17
     1d8:	0e 94 97 08 	call	0x112e	; 0x112e <__mulsf3>
     1dc:	4b 01       	movw	r8, r22
     1de:	5c 01       	movw	r10, r24
     1e0:	9b 01       	movw	r18, r22
     1e2:	ac 01       	movw	r20, r24
     1e4:	c7 01       	movw	r24, r14
     1e6:	b6 01       	movw	r22, r12
     1e8:	0e 94 92 08 	call	0x1124	; 0x1124 <__gesf2>
     1ec:	18 16       	cp	r1, r24
     1ee:	3c f4       	brge	.+14     	; 0x1fe <compute_degree_of_membership+0x96>
     1f0:	c5 01       	movw	r24, r10
     1f2:	b4 01       	movw	r22, r8
     1f4:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__fixsfsi>
     1f8:	36 2f       	mov	r19, r22
     1fa:	27 2f       	mov	r18, r23
     1fc:	06 c0       	rjmp	.+12     	; 0x20a <compute_degree_of_membership+0xa2>
     1fe:	c7 01       	movw	r24, r14
     200:	b6 01       	movw	r22, r12
     202:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__fixsfsi>
     206:	36 2f       	mov	r19, r22
     208:	27 2f       	mov	r18, r23
	mf->value = min(mf->value, UPPER_LIMIT);
     20a:	83 2f       	mov	r24, r19
     20c:	92 2f       	mov	r25, r18
     20e:	8f 3f       	cpi	r24, 0xFF	; 255
     210:	91 05       	cpc	r25, r1
     212:	19 f0       	breq	.+6      	; 0x21a <compute_degree_of_membership+0xb2>
     214:	14 f0       	brlt	.+4      	; 0x21a <compute_degree_of_membership+0xb2>
     216:	8f ef       	ldi	r24, 0xFF	; 255
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	9b 87       	std	Y+11, r25	; 0x0b
     21c:	8a 87       	std	Y+10, r24	; 0x0a
    }
} /* END DEGREE OF MEMBERSHIP */
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	1f 91       	pop	r17
     224:	0f 91       	pop	r16
     226:	ff 90       	pop	r15
     228:	ef 90       	pop	r14
     22a:	df 90       	pop	r13
     22c:	cf 90       	pop	r12
     22e:	bf 90       	pop	r11
     230:	af 90       	pop	r10
     232:	9f 90       	pop	r9
     234:	8f 90       	pop	r8
     236:	08 95       	ret

00000238 <fuzzification>:
    while (1)
	;
} /* END MAIN */

void fuzzification()
{
     238:	0f 93       	push	r16
     23a:	1f 93       	push	r17
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
    struct io_type *si;
    struct mf_type *mf;
    for (si = System_Inputs; si != NULL; si = si->next)
     240:	00 91 fa 01 	lds	r16, 0x01FA	; 0x8001fa <System_Inputs>
     244:	10 91 fb 01 	lds	r17, 0x01FB	; 0x8001fb <System_Inputs+0x1>
     248:	01 15       	cp	r16, r1
     24a:	11 05       	cpc	r17, r1
     24c:	b1 f0       	breq	.+44     	; 0x27a <fuzzification+0x42>
	for (mf = si->membership_functions; mf != NULL; mf = mf->next)
     24e:	f8 01       	movw	r30, r16
     250:	c4 85       	ldd	r28, Z+12	; 0x0c
     252:	d5 85       	ldd	r29, Z+13	; 0x0d
     254:	20 97       	sbiw	r28, 0x00	; 0
     256:	59 f0       	breq	.+22     	; 0x26e <fuzzification+0x36>
	    compute_degree_of_membership(mf, si->value);
     258:	f8 01       	movw	r30, r16
     25a:	62 85       	ldd	r22, Z+10	; 0x0a
     25c:	73 85       	ldd	r23, Z+11	; 0x0b
     25e:	ce 01       	movw	r24, r28
     260:	0e 94 b4 00 	call	0x168	; 0x168 <compute_degree_of_membership>
void fuzzification()
{
    struct io_type *si;
    struct mf_type *mf;
    for (si = System_Inputs; si != NULL; si = si->next)
	for (mf = si->membership_functions; mf != NULL; mf = mf->next)
     264:	08 8c       	ldd	r0, Y+24	; 0x18
     266:	d9 8d       	ldd	r29, Y+25	; 0x19
     268:	c0 2d       	mov	r28, r0
     26a:	20 97       	sbiw	r28, 0x00	; 0
     26c:	a9 f7       	brne	.-22     	; 0x258 <fuzzification+0x20>

void fuzzification()
{
    struct io_type *si;
    struct mf_type *mf;
    for (si = System_Inputs; si != NULL; si = si->next)
     26e:	f8 01       	movw	r30, r16
     270:	06 85       	ldd	r16, Z+14	; 0x0e
     272:	17 85       	ldd	r17, Z+15	; 0x0f
     274:	01 15       	cp	r16, r1
     276:	11 05       	cpc	r17, r1
     278:	51 f7       	brne	.-44     	; 0x24e <fuzzification+0x16>
	for (mf = si->membership_functions; mf != NULL; mf = mf->next)
	    compute_degree_of_membership(mf, si->value);
} /* END FUZZIFICATION */
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	1f 91       	pop	r17
     280:	0f 91       	pop	r16
     282:	08 95       	ret

00000284 <compute_area_of_trapezoid>:
	mf->value = min(mf->value, UPPER_LIMIT);
    }
} /* END DEGREE OF MEMBERSHIP */

float compute_area_of_trapezoid(struct mf_type *mf)
{
     284:	4f 92       	push	r4
     286:	5f 92       	push	r5
     288:	6f 92       	push	r6
     28a:	7f 92       	push	r7
     28c:	8f 92       	push	r8
     28e:	9f 92       	push	r9
     290:	af 92       	push	r10
     292:	bf 92       	push	r11
     294:	cf 92       	push	r12
     296:	df 92       	push	r13
     298:	ef 92       	push	r14
     29a:	ff 92       	push	r15
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	ec 01       	movw	r28, r24
    float run_1, run_2, area, top;
    float base;
    base = mf->point2 - mf->point1;
     2a2:	6e 85       	ldd	r22, Y+14	; 0x0e
     2a4:	7f 85       	ldd	r23, Y+15	; 0x0f
     2a6:	8c 85       	ldd	r24, Y+12	; 0x0c
     2a8:	9d 85       	ldd	r25, Y+13	; 0x0d
     2aa:	68 1b       	sub	r22, r24
     2ac:	79 0b       	sbc	r23, r25
     2ae:	07 2e       	mov	r0, r23
     2b0:	00 0c       	add	r0, r0
     2b2:	88 0b       	sbc	r24, r24
     2b4:	99 0b       	sbc	r25, r25
     2b6:	0e 94 06 08 	call	0x100c	; 0x100c <__floatsisf>
     2ba:	4b 01       	movw	r8, r22
     2bc:	5c 01       	movw	r10, r24
    run_1 = mf->value / mf->slope1;
     2be:	8a 85       	ldd	r24, Y+10	; 0x0a
     2c0:	9b 85       	ldd	r25, Y+11	; 0x0b
     2c2:	bc 01       	movw	r22, r24
     2c4:	99 0f       	add	r25, r25
     2c6:	88 0b       	sbc	r24, r24
     2c8:	99 0b       	sbc	r25, r25
     2ca:	0e 94 06 08 	call	0x100c	; 0x100c <__floatsisf>
     2ce:	6b 01       	movw	r12, r22
     2d0:	7c 01       	movw	r14, r24
     2d2:	28 89       	ldd	r18, Y+16	; 0x10
     2d4:	39 89       	ldd	r19, Y+17	; 0x11
     2d6:	4a 89       	ldd	r20, Y+18	; 0x12
     2d8:	5b 89       	ldd	r21, Y+19	; 0x13
     2da:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__divsf3>
     2de:	9b 01       	movw	r18, r22
     2e0:	ac 01       	movw	r20, r24
    run_2 = mf->value / mf->slope2;
    top = base - run_1 - run_2;
     2e2:	c5 01       	movw	r24, r10
     2e4:	b4 01       	movw	r22, r8
     2e6:	0e 94 ef 06 	call	0xdde	; 0xdde <__subsf3>
     2ea:	2b 01       	movw	r4, r22
     2ec:	3c 01       	movw	r6, r24
{
    float run_1, run_2, area, top;
    float base;
    base = mf->point2 - mf->point1;
    run_1 = mf->value / mf->slope1;
    run_2 = mf->value / mf->slope2;
     2ee:	2c 89       	ldd	r18, Y+20	; 0x14
     2f0:	3d 89       	ldd	r19, Y+21	; 0x15
     2f2:	4e 89       	ldd	r20, Y+22	; 0x16
     2f4:	5f 89       	ldd	r21, Y+23	; 0x17
     2f6:	c7 01       	movw	r24, r14
     2f8:	b6 01       	movw	r22, r12
     2fa:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__divsf3>
     2fe:	9b 01       	movw	r18, r22
     300:	ac 01       	movw	r20, r24
    top = base - run_1 - run_2;
     302:	c3 01       	movw	r24, r6
     304:	b2 01       	movw	r22, r4
     306:	0e 94 ef 06 	call	0xdde	; 0xdde <__subsf3>
     30a:	9b 01       	movw	r18, r22
     30c:	ac 01       	movw	r20, r24
    area = mf->value * (base + top) / 2;
     30e:	c5 01       	movw	r24, r10
     310:	b4 01       	movw	r22, r8
     312:	0e 94 f0 06 	call	0xde0	; 0xde0 <__addsf3>
     316:	9b 01       	movw	r18, r22
     318:	ac 01       	movw	r20, r24
     31a:	c7 01       	movw	r24, r14
     31c:	b6 01       	movw	r22, r12
     31e:	0e 94 97 08 	call	0x112e	; 0x112e <__mulsf3>
     322:	20 e0       	ldi	r18, 0x00	; 0
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	40 e0       	ldi	r20, 0x00	; 0
     328:	5f e3       	ldi	r21, 0x3F	; 63
     32a:	0e 94 97 08 	call	0x112e	; 0x112e <__mulsf3>
    return (area);
} /* END AREA OF TRAPEZOID */
     32e:	df 91       	pop	r29
     330:	cf 91       	pop	r28
     332:	ff 90       	pop	r15
     334:	ef 90       	pop	r14
     336:	df 90       	pop	r13
     338:	cf 90       	pop	r12
     33a:	bf 90       	pop	r11
     33c:	af 90       	pop	r10
     33e:	9f 90       	pop	r9
     340:	8f 90       	pop	r8
     342:	7f 90       	pop	r7
     344:	6f 90       	pop	r6
     346:	5f 90       	pop	r5
     348:	4f 90       	pop	r4
     34a:	08 95       	ret

0000034c <defuzzification>:
    if (nomatch == 0)
	printf("NO MATCHING RULES FOUND!\n"); /* NEW */
} /* END RULE EVALUATION */

void defuzzification()
{
     34c:	af 92       	push	r10
     34e:	bf 92       	push	r11
     350:	cf 92       	push	r12
     352:	df 92       	push	r13
     354:	ef 92       	push	r14
     356:	ff 92       	push	r15
     358:	0f 93       	push	r16
     35a:	1f 93       	push	r17
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
    struct io_type *so;
    struct mf_type *mf;
    int sum_of_products;
    int sum_of_areas;
    int area, centroid;
    for (so = System_Output; so != NULL; so = so->next)
     360:	e0 90 f0 01 	lds	r14, 0x01F0	; 0x8001f0 <__data_end>
     364:	f0 90 f1 01 	lds	r15, 0x01F1	; 0x8001f1 <__data_end+0x1>
     368:	e1 14       	cp	r14, r1
     36a:	f1 04       	cpc	r15, r1
     36c:	09 f4       	brne	.+2      	; 0x370 <defuzzification+0x24>
     36e:	57 c0       	rjmp	.+174    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
    {
	sum_of_products = 0;
	sum_of_areas = 0;
	for (mf = so->membership_functions; mf != NULL; mf = mf->next)
     370:	a1 2c       	mov	r10, r1
     372:	b1 2c       	mov	r11, r1
     374:	f7 01       	movw	r30, r14
     376:	c4 85       	ldd	r28, Z+12	; 0x0c
     378:	d5 85       	ldd	r29, Z+13	; 0x0d
     37a:	20 97       	sbiw	r28, 0x00	; 0
     37c:	71 f1       	breq	.+92     	; 0x3da <defuzzification+0x8e>
     37e:	ca 2c       	mov	r12, r10
     380:	db 2c       	mov	r13, r11
     382:	0a 2d       	mov	r16, r10
     384:	1b 2d       	mov	r17, r11
	{
	    area = compute_area_of_trapezoid(mf);
     386:	ce 01       	movw	r24, r28
     388:	0e 94 42 01 	call	0x284	; 0x284 <compute_area_of_trapezoid>
     38c:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__fixsfsi>
	    centroid = mf->point1 + (mf->point2 - mf->point1) / 2;
     390:	4c 85       	ldd	r20, Y+12	; 0x0c
     392:	5d 85       	ldd	r21, Y+13	; 0x0d
     394:	2e 85       	ldd	r18, Y+14	; 0x0e
     396:	3f 85       	ldd	r19, Y+15	; 0x0f
     398:	f9 01       	movw	r30, r18
     39a:	e4 1b       	sub	r30, r20
     39c:	f5 0b       	sbc	r31, r21
     39e:	9f 01       	movw	r18, r30
     3a0:	12 f4       	brpl	.+4      	; 0x3a6 <defuzzification+0x5a>
     3a2:	2f 5f       	subi	r18, 0xFF	; 255
     3a4:	3f 4f       	sbci	r19, 0xFF	; 255
     3a6:	35 95       	asr	r19
     3a8:	27 95       	ror	r18
     3aa:	24 0f       	add	r18, r20
     3ac:	35 1f       	adc	r19, r21
	    sum_of_products += area * centroid;
     3ae:	26 9f       	mul	r18, r22
     3b0:	a0 01       	movw	r20, r0
     3b2:	27 9f       	mul	r18, r23
     3b4:	50 0d       	add	r21, r0
     3b6:	36 9f       	mul	r19, r22
     3b8:	50 0d       	add	r21, r0
     3ba:	11 24       	eor	r1, r1
     3bc:	04 0f       	add	r16, r20
     3be:	15 1f       	adc	r17, r21
	    sum_of_areas += area;
     3c0:	c6 0e       	add	r12, r22
     3c2:	d7 1e       	adc	r13, r23
    int area, centroid;
    for (so = System_Output; so != NULL; so = so->next)
    {
	sum_of_products = 0;
	sum_of_areas = 0;
	for (mf = so->membership_functions; mf != NULL; mf = mf->next)
     3c4:	08 8c       	ldd	r0, Y+24	; 0x18
     3c6:	d9 8d       	ldd	r29, Y+25	; 0x19
     3c8:	c0 2d       	mov	r28, r0
     3ca:	20 97       	sbiw	r28, 0x00	; 0
     3cc:	e1 f6       	brne	.-72     	; 0x386 <defuzzification+0x3a>
	{
	    area = compute_area_of_trapezoid(mf);
	    centroid = mf->point1 + (mf->point2 - mf->point1) / 2;
	    sum_of_products += area * centroid;
     3ce:	80 2f       	mov	r24, r16
     3d0:	91 2f       	mov	r25, r17
	    sum_of_areas += area;
	}
	if (sum_of_areas == 0) /* NEW */
     3d2:	c1 14       	cp	r12, r1
     3d4:	d1 04       	cpc	r13, r1
     3d6:	b9 f4       	brne	.+46     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3d8:	02 c0       	rjmp	.+4      	; 0x3de <defuzzification+0x92>
    int sum_of_products;
    int sum_of_areas;
    int area, centroid;
    for (so = System_Output; so != NULL; so = so->next)
    {
	sum_of_products = 0;
     3da:	00 e0       	ldi	r16, 0x00	; 0
     3dc:	10 e0       	ldi	r17, 0x00	; 0
	    sum_of_products += area * centroid;
	    sum_of_areas += area;
	}
	if (sum_of_areas == 0) /* NEW */
	{
	    printf("Sum of Areas = 0, will cause div error\n"); /* NEW */
     3de:	8f e1       	ldi	r24, 0x1F	; 31
     3e0:	91 e0       	ldi	r25, 0x01	; 1
     3e2:	0e 94 cd 0a 	call	0x159a	; 0x159a <puts>
	    printf("Sum of Products= %d\n", sum_of_products);   /* NEW */
     3e6:	1f 93       	push	r17
     3e8:	0f 93       	push	r16
     3ea:	86 e4       	ldi	r24, 0x46	; 70
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	9f 93       	push	r25
     3f0:	8f 93       	push	r24
     3f2:	0e 94 b0 0a 	call	0x1560	; 0x1560 <printf>
	    so->value = 0;					/* NEW */
     3f6:	f7 01       	movw	r30, r14
     3f8:	13 86       	std	Z+11, r1	; 0x0b
     3fa:	12 86       	std	Z+10, r1	; 0x0a
	    return;						/* NEW */
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	0c c0       	rjmp	.+24     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
	}							/* NEW */
	so->value = sum_of_products / sum_of_areas;
     406:	b6 01       	movw	r22, r12
     408:	0e 94 28 09 	call	0x1250	; 0x1250 <__divmodhi4>
     40c:	f7 01       	movw	r30, r14
     40e:	73 87       	std	Z+11, r23	; 0x0b
     410:	62 87       	std	Z+10, r22	; 0x0a
    struct io_type *so;
    struct mf_type *mf;
    int sum_of_products;
    int sum_of_areas;
    int area, centroid;
    for (so = System_Output; so != NULL; so = so->next)
     412:	e6 84       	ldd	r14, Z+14	; 0x0e
     414:	f7 84       	ldd	r15, Z+15	; 0x0f
     416:	e1 14       	cp	r14, r1
     418:	f1 04       	cpc	r15, r1
     41a:	09 f0       	breq	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     41c:	ab cf       	rjmp	.-170    	; 0x374 <defuzzification+0x28>
	    so->value = 0;					/* NEW */
	    return;						/* NEW */
	}							/* NEW */
	so->value = sum_of_products / sum_of_areas;
    }
} /* END DEFUZZIFICATION */
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	1f 91       	pop	r17
     424:	0f 91       	pop	r16
     426:	ff 90       	pop	r15
     428:	ef 90       	pop	r14
     42a:	df 90       	pop	r13
     42c:	cf 90       	pop	r12
     42e:	bf 90       	pop	r11
     430:	af 90       	pop	r10
     432:	08 95       	ret

00000434 <add_in_line>:
struct rule_element_type *thenptr;
void add_in_line(char *buff, int a, int b, int c, int d);
void add_rule_line(char *buff, char *buff1, char *buff2);

void add_in_line(char *buff, int a, int b, int c, int d)
{
     434:	8f 92       	push	r8
     436:	9f 92       	push	r9
     438:	af 92       	push	r10
     43a:	bf 92       	push	r11
     43c:	cf 92       	push	r12
     43e:	df 92       	push	r13
     440:	ef 92       	push	r14
     442:	ff 92       	push	r15
     444:	0f 93       	push	r16
     446:	1f 93       	push	r17
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
     44c:	98 2e       	mov	r9, r24
     44e:	89 2e       	mov	r8, r25
     450:	7b 01       	movw	r14, r22
     452:	5a 01       	movw	r10, r20
     454:	69 01       	movw	r12, r18
    if (mfptr == NULL) /* first time thru only */
     456:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <mfptr>
     45a:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <mfptr+0x1>
     45e:	89 2b       	or	r24, r25
     460:	a9 f4       	brne	.+42     	; 0x48c <add_in_line+0x58>
    {
	mfptr = (struct mf_type *)calloc(1, sizeof(struct mf_type));
     462:	6a e1       	ldi	r22, 0x1A	; 26
     464:	70 e0       	ldi	r23, 0x00	; 0
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	0e 94 50 09 	call	0x12a0	; 0x12a0 <calloc>
     46e:	90 93 f3 01 	sts	0x01F3, r25	; 0x8001f3 <mfptr+0x1>
     472:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <mfptr>
	top_mf = mfptr;
     476:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <top_mf+0x1>
     47a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <top_mf>
	ioptr->membership_functions = mfptr;
     47e:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <ioptr>
     482:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <ioptr+0x1>
     486:	95 87       	std	Z+13, r25	; 0x0d
     488:	84 87       	std	Z+12, r24	; 0x0c
     48a:	20 c0       	rjmp	.+64     	; 0x4cc <add_in_line+0x98>
    }
    else
    {
	for (mfptr = top_mf; mfptr->next; mfptr = mfptr->next)
     48c:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <top_mf>
     490:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <top_mf+0x1>
     494:	f0 93 f3 01 	sts	0x01F3, r31	; 0x8001f3 <mfptr+0x1>
     498:	e0 93 f2 01 	sts	0x01F2, r30	; 0x8001f2 <mfptr>
     49c:	c0 8d       	ldd	r28, Z+24	; 0x18
     49e:	d1 8d       	ldd	r29, Z+25	; 0x19
     4a0:	20 97       	sbiw	r28, 0x00	; 0
     4a2:	11 f4       	brne	.+4      	; 0x4a8 <add_in_line+0x74>
     4a4:	06 c0       	rjmp	.+12     	; 0x4b2 <add_in_line+0x7e>
     4a6:	ef 01       	movw	r28, r30
     4a8:	e8 8d       	ldd	r30, Y+24	; 0x18
     4aa:	f9 8d       	ldd	r31, Y+25	; 0x19
     4ac:	30 97       	sbiw	r30, 0x00	; 0
     4ae:	d9 f7       	brne	.-10     	; 0x4a6 <add_in_line+0x72>
     4b0:	01 c0       	rjmp	.+2      	; 0x4b4 <add_in_line+0x80>
     4b2:	ef 01       	movw	r28, r30
	    ; /* spin to last */
	mfptr->next = (struct mf_type *)calloc(1, sizeof(struct mf_type));
     4b4:	6a e1       	ldi	r22, 0x1A	; 26
     4b6:	70 e0       	ldi	r23, 0x00	; 0
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	0e 94 50 09 	call	0x12a0	; 0x12a0 <calloc>
     4c0:	99 8f       	std	Y+25, r25	; 0x19
     4c2:	88 8f       	std	Y+24, r24	; 0x18
	mfptr = mfptr->next;
     4c4:	90 93 f3 01 	sts	0x01F3, r25	; 0x8001f3 <mfptr+0x1>
     4c8:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <mfptr>
    }
    sprintf(mfptr->name, "%s", buff); /* membership name, NL, ZE, etc */
     4cc:	69 2d       	mov	r22, r9
     4ce:	78 2d       	mov	r23, r8
     4d0:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <mfptr>
     4d4:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <mfptr+0x1>
     4d8:	0e 94 a9 0a 	call	0x1552	; 0x1552 <strcpy>
    mfptr->point1 = a;		      /* left x axis value */
     4dc:	c0 91 f2 01 	lds	r28, 0x01F2	; 0x8001f2 <mfptr>
     4e0:	d0 91 f3 01 	lds	r29, 0x01F3	; 0x8001f3 <mfptr+0x1>
     4e4:	fd 86       	std	Y+13, r15	; 0x0d
     4e6:	ec 86       	std	Y+12, r14	; 0x0c
    mfptr->point2 = d;		      /* right x axis value */
     4e8:	1f 87       	std	Y+15, r17	; 0x0f
     4ea:	0e 87       	std	Y+14, r16	; 0x0e
    if (b - a > 0)
     4ec:	b5 01       	movw	r22, r10
     4ee:	6e 19       	sub	r22, r14
     4f0:	7f 09       	sbc	r23, r15
     4f2:	16 16       	cp	r1, r22
     4f4:	17 06       	cpc	r1, r23
     4f6:	ac f4       	brge	.+42     	; 0x522 <add_in_line+0xee>
	mfptr->slope1 = UPPER_LIMIT / (b - a); /* left slope */
     4f8:	8f ef       	ldi	r24, 0xFF	; 255
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	0e 94 28 09 	call	0x1250	; 0x1250 <__divmodhi4>
     500:	07 2e       	mov	r0, r23
     502:	00 0c       	add	r0, r0
     504:	88 0b       	sbc	r24, r24
     506:	99 0b       	sbc	r25, r25
     508:	0e 94 06 08 	call	0x100c	; 0x100c <__floatsisf>
     50c:	68 8b       	std	Y+16, r22	; 0x10
     50e:	79 8b       	std	Y+17, r23	; 0x11
     510:	8a 8b       	std	Y+18, r24	; 0x12
     512:	9b 8b       	std	Y+19, r25	; 0x13
    {
	printf("Error in input line, membership element %s.\n",
	       buff);
	exit(1);
    }
    if (d - c > 0)
     514:	b8 01       	movw	r22, r16
     516:	6c 19       	sub	r22, r12
     518:	7d 09       	sbc	r23, r13
     51a:	16 16       	cp	r1, r22
     51c:	17 06       	cpc	r1, r23
     51e:	74 f0       	brlt	.+28     	; 0x53c <add_in_line+0x108>
     520:	1c c0       	rjmp	.+56     	; 0x55a <add_in_line+0x126>
    mfptr->point2 = d;		      /* right x axis value */
    if (b - a > 0)
	mfptr->slope1 = UPPER_LIMIT / (b - a); /* left slope */
    else
    {
	printf("Error in input line, membership element %s.\n",
     522:	8f 92       	push	r8
     524:	9f 92       	push	r9
     526:	8b e5       	ldi	r24, 0x5B	; 91
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	9f 93       	push	r25
     52c:	8f 93       	push	r24
     52e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <printf>
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	ff cf       	rjmp	.-2      	; 0x53a <add_in_line+0x106>
	       buff);
	exit(1);
    }
    if (d - c > 0)
	mfptr->slope2 = UPPER_LIMIT / (d - c); /* right slope */
     53c:	8f ef       	ldi	r24, 0xFF	; 255
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0e 94 28 09 	call	0x1250	; 0x1250 <__divmodhi4>
     544:	07 2e       	mov	r0, r23
     546:	00 0c       	add	r0, r0
     548:	88 0b       	sbc	r24, r24
     54a:	99 0b       	sbc	r25, r25
     54c:	0e 94 06 08 	call	0x100c	; 0x100c <__floatsisf>
     550:	6c 8b       	std	Y+20, r22	; 0x14
     552:	7d 8b       	std	Y+21, r23	; 0x15
     554:	8e 8b       	std	Y+22, r24	; 0x16
     556:	9f 8b       	std	Y+23, r25	; 0x17
     558:	0d c0       	rjmp	.+26     	; 0x574 <add_in_line+0x140>
    else
    {
	printf("Error in input line, membership element %s.\n",
     55a:	8f 92       	push	r8
     55c:	9f 92       	push	r9
     55e:	8b e5       	ldi	r24, 0x5B	; 91
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	9f 93       	push	r25
     564:	8f 93       	push	r24
     566:	0e 94 b0 0a 	call	0x1560	; 0x1560 <printf>
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	ff cf       	rjmp	.-2      	; 0x572 <add_in_line+0x13e>
	       buff);
	exit(1);
    }
}
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	1f 91       	pop	r17
     57a:	0f 91       	pop	r16
     57c:	ff 90       	pop	r15
     57e:	ef 90       	pop	r14
     580:	df 90       	pop	r13
     582:	cf 90       	pop	r12
     584:	bf 90       	pop	r11
     586:	af 90       	pop	r10
     588:	9f 90       	pop	r9
     58a:	8f 90       	pop	r8
     58c:	08 95       	ret

0000058e <add_rule_line>:

void add_rule_line(char *buff, char *buff1, char *buff2)
{
     58e:	cf 92       	push	r12
     590:	df 92       	push	r13
     592:	ef 92       	push	r14
     594:	ff 92       	push	r15
     596:	0f 93       	push	r16
     598:	1f 93       	push	r17
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
     59e:	6c 01       	movw	r12, r24
     5a0:	7b 01       	movw	r14, r22
     5a2:	8a 01       	movw	r16, r20
    ioptr = System_Inputs; /* points to angle */
     5a4:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <System_Inputs>
     5a8:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <System_Inputs+0x1>
     5ac:	f0 93 f7 01 	sts	0x01F7, r31	; 0x8001f7 <ioptr+0x1>
     5b0:	e0 93 f6 01 	sts	0x01F6, r30	; 0x8001f6 <ioptr>
    for (mfptr = ioptr->membership_functions; mfptr != NULL; mfptr = mfptr->next)
     5b4:	c4 85       	ldd	r28, Z+12	; 0x0c
     5b6:	d5 85       	ldd	r29, Z+13	; 0x0d
     5b8:	d0 93 f3 01 	sts	0x01F3, r29	; 0x8001f3 <mfptr+0x1>
     5bc:	c0 93 f2 01 	sts	0x01F2, r28	; 0x8001f2 <mfptr>
     5c0:	20 97       	sbiw	r28, 0x00	; 0
     5c2:	d9 f1       	breq	.+118    	; 0x63a <add_rule_line+0xac>
    {
	if ((strcmp(mfptr->name, buff)) == 0)
     5c4:	b6 01       	movw	r22, r12
     5c6:	ce 01       	movw	r24, r28
     5c8:	0e 94 a0 0a 	call	0x1540	; 0x1540 <strcmp>
     5cc:	89 2b       	or	r24, r25
     5ce:	61 f5       	brne	.+88     	; 0x628 <add_rule_line+0x9a>
	{
	    ifptr = (struct rule_element_type *)
		calloc(1, sizeof(struct rule_element_type));
     5d0:	64 e0       	ldi	r22, 0x04	; 4
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	0e 94 50 09 	call	0x12a0	; 0x12a0 <calloc>
    ioptr = System_Inputs; /* points to angle */
    for (mfptr = ioptr->membership_functions; mfptr != NULL; mfptr = mfptr->next)
    {
	if ((strcmp(mfptr->name, buff)) == 0)
	{
	    ifptr = (struct rule_element_type *)
     5dc:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <ifptr+0x1>
     5e0:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <ifptr>
		calloc(1, sizeof(struct rule_element_type));
	    ruleptr->if_side = ifptr;     /* points to angle */
     5e4:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <ruleptr>
     5e8:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <ruleptr+0x1>
     5ec:	91 83       	std	Z+1, r25	; 0x01
     5ee:	80 83       	st	Z, r24
	    ifptr->value = &mfptr->value; /* needs address here */
     5f0:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <ifptr>
     5f4:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <ifptr+0x1>
     5f8:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <mfptr>
     5fc:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <mfptr+0x1>
     600:	0a 96       	adiw	r24, 0x0a	; 10
     602:	91 83       	std	Z+1, r25	; 0x01
     604:	80 83       	st	Z, r24
	    ifptr->next = (struct rule_element_type *)
     606:	c0 91 fc 01 	lds	r28, 0x01FC	; 0x8001fc <ifptr>
     60a:	d0 91 fd 01 	lds	r29, 0x01FD	; 0x8001fd <ifptr+0x1>
		calloc(1, sizeof(struct rule_element_type));
     60e:	64 e0       	ldi	r22, 0x04	; 4
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	0e 94 50 09 	call	0x12a0	; 0x12a0 <calloc>
	{
	    ifptr = (struct rule_element_type *)
		calloc(1, sizeof(struct rule_element_type));
	    ruleptr->if_side = ifptr;     /* points to angle */
	    ifptr->value = &mfptr->value; /* needs address here */
	    ifptr->next = (struct rule_element_type *)
     61a:	9b 83       	std	Y+3, r25	; 0x03
     61c:	8a 83       	std	Y+2, r24	; 0x02
		calloc(1, sizeof(struct rule_element_type));
	    ifptr = ifptr->next;
     61e:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <ifptr+0x1>
     622:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <ifptr>
	    break; /* match found */
     626:	09 c0       	rjmp	.+18     	; 0x63a <add_rule_line+0xac>
}

void add_rule_line(char *buff, char *buff1, char *buff2)
{
    ioptr = System_Inputs; /* points to angle */
    for (mfptr = ioptr->membership_functions; mfptr != NULL; mfptr = mfptr->next)
     628:	08 8c       	ldd	r0, Y+24	; 0x18
     62a:	d9 8d       	ldd	r29, Y+25	; 0x19
     62c:	c0 2d       	mov	r28, r0
     62e:	d0 93 f3 01 	sts	0x01F3, r29	; 0x8001f3 <mfptr+0x1>
     632:	c0 93 f2 01 	sts	0x01F2, r28	; 0x8001f2 <mfptr>
     636:	20 97       	sbiw	r28, 0x00	; 0
     638:	29 f6       	brne	.-118    	; 0x5c4 <add_rule_line+0x36>
		calloc(1, sizeof(struct rule_element_type));
	    ifptr = ifptr->next;
	    break; /* match found */
	}
    }
    ioptr = ioptr->next; /* points to velocity */
     63a:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <ioptr>
     63e:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <ioptr+0x1>
     642:	06 84       	ldd	r0, Z+14	; 0x0e
     644:	f7 85       	ldd	r31, Z+15	; 0x0f
     646:	e0 2d       	mov	r30, r0
     648:	f0 93 f7 01 	sts	0x01F7, r31	; 0x8001f7 <ioptr+0x1>
     64c:	e0 93 f6 01 	sts	0x01F6, r30	; 0x8001f6 <ioptr>
    for (mfptr = ioptr->membership_functions; mfptr != NULL; mfptr = mfptr->next)
     650:	c4 85       	ldd	r28, Z+12	; 0x0c
     652:	d5 85       	ldd	r29, Z+13	; 0x0d
     654:	d0 93 f3 01 	sts	0x01F3, r29	; 0x8001f3 <mfptr+0x1>
     658:	c0 93 f2 01 	sts	0x01F2, r28	; 0x8001f2 <mfptr>
     65c:	20 97       	sbiw	r28, 0x00	; 0
     65e:	b9 f0       	breq	.+46     	; 0x68e <add_rule_line+0x100>
    {
	if ((strcmp(mfptr->name, buff1)) == 0)
     660:	b7 01       	movw	r22, r14
     662:	ce 01       	movw	r24, r28
     664:	0e 94 a0 0a 	call	0x1540	; 0x1540 <strcmp>
     668:	89 2b       	or	r24, r25
     66a:	41 f4       	brne	.+16     	; 0x67c <add_rule_line+0xee>
	{
	    ifptr->value = &mfptr->value; /* needs address here */
     66c:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <ifptr>
     670:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <ifptr+0x1>
     674:	2a 96       	adiw	r28, 0x0a	; 10
     676:	d1 83       	std	Z+1, r29	; 0x01
     678:	c0 83       	st	Z, r28
	    break;			  /* match found */
     67a:	09 c0       	rjmp	.+18     	; 0x68e <add_rule_line+0x100>
	    ifptr = ifptr->next;
	    break; /* match found */
	}
    }
    ioptr = ioptr->next; /* points to velocity */
    for (mfptr = ioptr->membership_functions; mfptr != NULL; mfptr = mfptr->next)
     67c:	08 8c       	ldd	r0, Y+24	; 0x18
     67e:	d9 8d       	ldd	r29, Y+25	; 0x19
     680:	c0 2d       	mov	r28, r0
     682:	d0 93 f3 01 	sts	0x01F3, r29	; 0x8001f3 <mfptr+0x1>
     686:	c0 93 f2 01 	sts	0x01F2, r28	; 0x8001f2 <mfptr>
     68a:	20 97       	sbiw	r28, 0x00	; 0
     68c:	49 f7       	brne	.-46     	; 0x660 <add_rule_line+0xd2>
	{
	    ifptr->value = &mfptr->value; /* needs address here */
	    break;			  /* match found */
	}
    }
    if (outptr == NULL)
     68e:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <outptr>
     692:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <outptr+0x1>
     696:	89 2b       	or	r24, r25
     698:	41 f4       	brne	.+16     	; 0x6aa <add_rule_line+0x11c>
	outptr = System_Output; /* point then stuff to output */
     69a:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <__data_end>
     69e:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <__data_end+0x1>
     6a2:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <outptr+0x1>
     6a6:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <outptr>
    for (mfptr = outptr->membership_functions; mfptr != NULL; mfptr = mfptr->next)
     6aa:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <outptr>
     6ae:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <outptr+0x1>
     6b2:	c4 85       	ldd	r28, Z+12	; 0x0c
     6b4:	d5 85       	ldd	r29, Z+13	; 0x0d
     6b6:	d0 93 f3 01 	sts	0x01F3, r29	; 0x8001f3 <mfptr+0x1>
     6ba:	c0 93 f2 01 	sts	0x01F2, r28	; 0x8001f2 <mfptr>
     6be:	20 97       	sbiw	r28, 0x00	; 0
     6c0:	21 f1       	breq	.+72     	; 0x70a <add_rule_line+0x17c>
    {
	if ((strcmp(mfptr->name, buff2)) == 0)
     6c2:	b8 01       	movw	r22, r16
     6c4:	ce 01       	movw	r24, r28
     6c6:	0e 94 a0 0a 	call	0x1540	; 0x1540 <strcmp>
     6ca:	89 2b       	or	r24, r25
     6cc:	a9 f4       	brne	.+42     	; 0x6f8 <add_rule_line+0x16a>
	{
	    thenptr = (struct rule_element_type *)
		calloc(1, sizeof(struct rule_element_type));
     6ce:	64 e0       	ldi	r22, 0x04	; 4
     6d0:	70 e0       	ldi	r23, 0x00	; 0
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	0e 94 50 09 	call	0x12a0	; 0x12a0 <calloc>
	outptr = System_Output; /* point then stuff to output */
    for (mfptr = outptr->membership_functions; mfptr != NULL; mfptr = mfptr->next)
    {
	if ((strcmp(mfptr->name, buff2)) == 0)
	{
	    thenptr = (struct rule_element_type *)
     6da:	90 93 f5 01 	sts	0x01F5, r25	; 0x8001f5 <thenptr+0x1>
     6de:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <thenptr>
		calloc(1, sizeof(struct rule_element_type));
	    ruleptr->then_side = thenptr;
     6e2:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <ruleptr>
     6e6:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <ruleptr+0x1>
     6ea:	93 83       	std	Z+3, r25	; 0x03
     6ec:	82 83       	std	Z+2, r24	; 0x02
	    thenptr->value = &mfptr->value; /* needs address here */
     6ee:	2a 96       	adiw	r28, 0x0a	; 10
     6f0:	fc 01       	movw	r30, r24
     6f2:	d1 83       	std	Z+1, r29	; 0x01
     6f4:	c0 83       	st	Z, r28
	    break;			    /* match found */
     6f6:	09 c0       	rjmp	.+18     	; 0x70a <add_rule_line+0x17c>
	    break;			  /* match found */
	}
    }
    if (outptr == NULL)
	outptr = System_Output; /* point then stuff to output */
    for (mfptr = outptr->membership_functions; mfptr != NULL; mfptr = mfptr->next)
     6f8:	08 8c       	ldd	r0, Y+24	; 0x18
     6fa:	d9 8d       	ldd	r29, Y+25	; 0x19
     6fc:	c0 2d       	mov	r28, r0
     6fe:	d0 93 f3 01 	sts	0x01F3, r29	; 0x8001f3 <mfptr+0x1>
     702:	c0 93 f2 01 	sts	0x01F2, r28	; 0x8001f2 <mfptr>
     706:	20 97       	sbiw	r28, 0x00	; 0
     708:	e1 f6       	brne	.-72     	; 0x6c2 <add_rule_line+0x134>
	    ruleptr->then_side = thenptr;
	    thenptr->value = &mfptr->value; /* needs address here */
	    break;			    /* match found */
	}
    }
    ruleptr->next = (struct rule_type *)calloc(1, sizeof(struct rule_type));
     70a:	c0 91 fe 01 	lds	r28, 0x01FE	; 0x8001fe <ruleptr>
     70e:	d0 91 ff 01 	lds	r29, 0x01FF	; 0x8001ff <ruleptr+0x1>
     712:	66 e0       	ldi	r22, 0x06	; 6
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 50 09 	call	0x12a0	; 0x12a0 <calloc>
     71e:	9d 83       	std	Y+5, r25	; 0x05
     720:	8c 83       	std	Y+4, r24	; 0x04
    ruleptr = ruleptr->next;
     722:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <ruleptr+0x1>
     726:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <ruleptr>
}
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	1f 91       	pop	r17
     730:	0f 91       	pop	r16
     732:	ff 90       	pop	r15
     734:	ef 90       	pop	r14
     736:	df 90       	pop	r13
     738:	cf 90       	pop	r12
     73a:	08 95       	ret

0000073c <initialize_system>:

void initialize_system() /* NEW FUNCTION INITIALIZE */
{
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
    ioptr = NULL;
    ruleptr = NULL;
     744:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <ruleptr+0x1>
     748:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <ruleptr>
    ifptr = NULL;
     74c:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <ifptr+0x1>
     750:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <ifptr>
    thenptr = NULL;
     754:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <thenptr+0x1>
     758:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <thenptr>
    /* READ THE FIRST FUZZY SET (ANTECEDENT); INITIALIZE STRUCTURES */
    ioptr = (struct io_type *)calloc(1, sizeof(struct io_type));
     75c:	60 e1       	ldi	r22, 0x10	; 16
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	0e 94 50 09 	call	0x12a0	; 0x12a0 <calloc>
     768:	90 93 f7 01 	sts	0x01F7, r25	; 0x8001f7 <ioptr+0x1>
     76c:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <ioptr>
    System_Inputs = ioptr;		 /* Anchor to top of inputs */
     770:	90 93 fb 01 	sts	0x01FB, r25	; 0x8001fb <System_Inputs+0x1>
     774:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <System_Inputs>
    sprintf(ioptr->name, "%s", "Angle"); /* into struct io_type.name */
     778:	26 e0       	ldi	r18, 0x06	; 6
     77a:	e8 e8       	ldi	r30, 0x88	; 136
     77c:	f1 e0       	ldi	r31, 0x01	; 1
     77e:	dc 01       	movw	r26, r24
     780:	01 90       	ld	r0, Z+
     782:	0d 92       	st	X+, r0
     784:	2a 95       	dec	r18
     786:	e1 f7       	brne	.-8      	; 0x780 <initialize_system+0x44>
    mfptr = NULL;
     788:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <mfptr+0x1>
     78c:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <mfptr>
    add_in_line("NL", 0, 31, 31, 63);
     790:	0f e3       	ldi	r16, 0x3F	; 63
     792:	10 e0       	ldi	r17, 0x00	; 0
     794:	2f e1       	ldi	r18, 0x1F	; 31
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	4f e1       	ldi	r20, 0x1F	; 31
     79a:	50 e0       	ldi	r21, 0x00	; 0
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	8e e8       	ldi	r24, 0x8E	; 142
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	0e 94 1a 02 	call	0x434	; 0x434 <add_in_line>
    add_in_line("NM", 31, 63, 63, 95);
     7a8:	0f e5       	ldi	r16, 0x5F	; 95
     7aa:	10 e0       	ldi	r17, 0x00	; 0
     7ac:	2f e3       	ldi	r18, 0x3F	; 63
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	4f e3       	ldi	r20, 0x3F	; 63
     7b2:	50 e0       	ldi	r21, 0x00	; 0
     7b4:	6f e1       	ldi	r22, 0x1F	; 31
     7b6:	70 e0       	ldi	r23, 0x00	; 0
     7b8:	81 e9       	ldi	r24, 0x91	; 145
     7ba:	91 e0       	ldi	r25, 0x01	; 1
     7bc:	0e 94 1a 02 	call	0x434	; 0x434 <add_in_line>
    add_in_line("NS", 63, 95, 95, 127);
     7c0:	0f e7       	ldi	r16, 0x7F	; 127
     7c2:	10 e0       	ldi	r17, 0x00	; 0
     7c4:	2f e5       	ldi	r18, 0x5F	; 95
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	4f e5       	ldi	r20, 0x5F	; 95
     7ca:	50 e0       	ldi	r21, 0x00	; 0
     7cc:	6f e3       	ldi	r22, 0x3F	; 63
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	84 e9       	ldi	r24, 0x94	; 148
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	0e 94 1a 02 	call	0x434	; 0x434 <add_in_line>
    add_in_line("ZE", 95, 127, 127, 159);
     7d8:	0f e9       	ldi	r16, 0x9F	; 159
     7da:	10 e0       	ldi	r17, 0x00	; 0
     7dc:	2f e7       	ldi	r18, 0x7F	; 127
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	4f e7       	ldi	r20, 0x7F	; 127
     7e2:	50 e0       	ldi	r21, 0x00	; 0
     7e4:	6f e5       	ldi	r22, 0x5F	; 95
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	87 e9       	ldi	r24, 0x97	; 151
     7ea:	91 e0       	ldi	r25, 0x01	; 1
     7ec:	0e 94 1a 02 	call	0x434	; 0x434 <add_in_line>
    add_in_line("PS", 127, 159, 159, 191);
     7f0:	0f eb       	ldi	r16, 0xBF	; 191
     7f2:	10 e0       	ldi	r17, 0x00	; 0
     7f4:	2f e9       	ldi	r18, 0x9F	; 159
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	4f e9       	ldi	r20, 0x9F	; 159
     7fa:	50 e0       	ldi	r21, 0x00	; 0
     7fc:	6f e7       	ldi	r22, 0x7F	; 127
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	8a e9       	ldi	r24, 0x9A	; 154
     802:	91 e0       	ldi	r25, 0x01	; 1
     804:	0e 94 1a 02 	call	0x434	; 0x434 <add_in_line>
    add_in_line("PM", 159, 191, 191, 223);
     808:	0f ed       	ldi	r16, 0xDF	; 223
     80a:	10 e0       	ldi	r17, 0x00	; 0
     80c:	2f eb       	ldi	r18, 0xBF	; 191
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	4f eb       	ldi	r20, 0xBF	; 191
     812:	50 e0       	ldi	r21, 0x00	; 0
     814:	6f e9       	ldi	r22, 0x9F	; 159
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	8d e9       	ldi	r24, 0x9D	; 157
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	0e 94 1a 02 	call	0x434	; 0x434 <add_in_line>
    add_in_line("PL", 191, 223, 223, 255);
     820:	0f ef       	ldi	r16, 0xFF	; 255
     822:	10 e0       	ldi	r17, 0x00	; 0
     824:	2f ed       	ldi	r18, 0xDF	; 223
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	4f ed       	ldi	r20, 0xDF	; 223
     82a:	50 e0       	ldi	r21, 0x00	; 0
     82c:	6f eb       	ldi	r22, 0xBF	; 191
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	80 ea       	ldi	r24, 0xA0	; 160
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	0e 94 1a 02 	call	0x434	; 0x434 <add_in_line>

    /* READ THE SECOND FUZZY SET (ANTECEDENT); INITIALIZE STRUCTURES */
    ioptr->next = (struct io_type *)calloc(1, sizeof(struct io_type));
     838:	c0 91 f6 01 	lds	r28, 0x01F6	; 0x8001f6 <ioptr>
     83c:	d0 91 f7 01 	lds	r29, 0x01F7	; 0x8001f7 <ioptr+0x1>
     840:	60 e1       	ldi	r22, 0x10	; 16
     842:	70 e0       	ldi	r23, 0x00	; 0
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	0e 94 50 09 	call	0x12a0	; 0x12a0 <calloc>
     84c:	9f 87       	std	Y+15, r25	; 0x0f
     84e:	8e 87       	std	Y+14, r24	; 0x0e
    ioptr = ioptr->next;
     850:	90 93 f7 01 	sts	0x01F7, r25	; 0x8001f7 <ioptr+0x1>
     854:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <ioptr>
    sprintf(ioptr->name, "%s", "Velocity"); /* into struct io_type.name */
     858:	29 e0       	ldi	r18, 0x09	; 9
     85a:	e3 ea       	ldi	r30, 0xA3	; 163
     85c:	f1 e0       	ldi	r31, 0x01	; 1
     85e:	dc 01       	movw	r26, r24
     860:	01 90       	ld	r0, Z+
     862:	0d 92       	st	X+, r0
     864:	2a 95       	dec	r18
     866:	e1 f7       	brne	.-8      	; 0x860 <initialize_system+0x124>
    mfptr = NULL;
     868:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <mfptr+0x1>
     86c:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <mfptr>
    add_in_line("NL", 0, 31, 31, 63);
     870:	0f e3       	ldi	r16, 0x3F	; 63
     872:	10 e0       	ldi	r17, 0x00	; 0
     874:	2f e1       	ldi	r18, 0x1F	; 31
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	4f e1       	ldi	r20, 0x1F	; 31
     87a:	50 e0       	ldi	r21, 0x00	; 0
     87c:	60 e0       	ldi	r22, 0x00	; 0
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	8e e8       	ldi	r24, 0x8E	; 142
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	0e 94 1a 02 	call	0x434	; 0x434 <add_in_line>
    add_in_line("NM", 31, 63, 63, 95);
     888:	0f e5       	ldi	r16, 0x5F	; 95
     88a:	10 e0       	ldi	r17, 0x00	; 0
     88c:	2f e3       	ldi	r18, 0x3F	; 63
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	4f e3       	ldi	r20, 0x3F	; 63
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	6f e1       	ldi	r22, 0x1F	; 31
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	81 e9       	ldi	r24, 0x91	; 145
     89a:	91 e0       	ldi	r25, 0x01	; 1
     89c:	0e 94 1a 02 	call	0x434	; 0x434 <add_in_line>
    add_in_line("NS", 63, 95, 95, 127);
     8a0:	0f e7       	ldi	r16, 0x7F	; 127
     8a2:	10 e0       	ldi	r17, 0x00	; 0
     8a4:	2f e5       	ldi	r18, 0x5F	; 95
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	4f e5       	ldi	r20, 0x5F	; 95
     8aa:	50 e0       	ldi	r21, 0x00	; 0
     8ac:	6f e3       	ldi	r22, 0x3F	; 63
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	84 e9       	ldi	r24, 0x94	; 148
     8b2:	91 e0       	ldi	r25, 0x01	; 1
     8b4:	0e 94 1a 02 	call	0x434	; 0x434 <add_in_line>
    add_in_line("ZE", 95, 127, 127, 159);
     8b8:	0f e9       	ldi	r16, 0x9F	; 159
     8ba:	10 e0       	ldi	r17, 0x00	; 0
     8bc:	2f e7       	ldi	r18, 0x7F	; 127
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	4f e7       	ldi	r20, 0x7F	; 127
     8c2:	50 e0       	ldi	r21, 0x00	; 0
     8c4:	6f e5       	ldi	r22, 0x5F	; 95
     8c6:	70 e0       	ldi	r23, 0x00	; 0
     8c8:	87 e9       	ldi	r24, 0x97	; 151
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	0e 94 1a 02 	call	0x434	; 0x434 <add_in_line>
    add_in_line("PS", 127, 159, 159, 191);
     8d0:	0f eb       	ldi	r16, 0xBF	; 191
     8d2:	10 e0       	ldi	r17, 0x00	; 0
     8d4:	2f e9       	ldi	r18, 0x9F	; 159
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	4f e9       	ldi	r20, 0x9F	; 159
     8da:	50 e0       	ldi	r21, 0x00	; 0
     8dc:	6f e7       	ldi	r22, 0x7F	; 127
     8de:	70 e0       	ldi	r23, 0x00	; 0
     8e0:	8a e9       	ldi	r24, 0x9A	; 154
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	0e 94 1a 02 	call	0x434	; 0x434 <add_in_line>
    add_in_line("PM", 159, 191, 191, 223);
     8e8:	0f ed       	ldi	r16, 0xDF	; 223
     8ea:	10 e0       	ldi	r17, 0x00	; 0
     8ec:	2f eb       	ldi	r18, 0xBF	; 191
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	4f eb       	ldi	r20, 0xBF	; 191
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	6f e9       	ldi	r22, 0x9F	; 159
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	8d e9       	ldi	r24, 0x9D	; 157
     8fa:	91 e0       	ldi	r25, 0x01	; 1
     8fc:	0e 94 1a 02 	call	0x434	; 0x434 <add_in_line>
    add_in_line("PL", 191, 223, 223, 255);
     900:	0f ef       	ldi	r16, 0xFF	; 255
     902:	10 e0       	ldi	r17, 0x00	; 0
     904:	2f ed       	ldi	r18, 0xDF	; 223
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	4f ed       	ldi	r20, 0xDF	; 223
     90a:	50 e0       	ldi	r21, 0x00	; 0
     90c:	6f eb       	ldi	r22, 0xBF	; 191
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	80 ea       	ldi	r24, 0xA0	; 160
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	0e 94 1a 02 	call	0x434	; 0x434 <add_in_line>

    /* READ THE THIRD FUZZY SET (CONSEQUENCE); INITIALIZE STRUCTURES */
    ioptr = (struct io_type *)calloc(1, sizeof(struct io_type));
     918:	60 e1       	ldi	r22, 0x10	; 16
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	0e 94 50 09 	call	0x12a0	; 0x12a0 <calloc>
     924:	90 93 f7 01 	sts	0x01F7, r25	; 0x8001f7 <ioptr+0x1>
     928:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <ioptr>
    System_Output = ioptr;		 /* Anchor output structure */
     92c:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <__data_end+0x1>
     930:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <__data_end>
    sprintf(ioptr->name, "%s", "Force"); /* into struct io_type.name */
     934:	26 e0       	ldi	r18, 0x06	; 6
     936:	ec ea       	ldi	r30, 0xAC	; 172
     938:	f1 e0       	ldi	r31, 0x01	; 1
     93a:	dc 01       	movw	r26, r24
     93c:	01 90       	ld	r0, Z+
     93e:	0d 92       	st	X+, r0
     940:	2a 95       	dec	r18
     942:	e1 f7       	brne	.-8      	; 0x93c <__stack+0x3d>
    mfptr = NULL;
     944:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <mfptr+0x1>
     948:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <mfptr>
    add_in_line("NL", 0, 31, 31, 63);
     94c:	0f e3       	ldi	r16, 0x3F	; 63
     94e:	10 e0       	ldi	r17, 0x00	; 0
     950:	2f e1       	ldi	r18, 0x1F	; 31
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	4f e1       	ldi	r20, 0x1F	; 31
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	8e e8       	ldi	r24, 0x8E	; 142
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	0e 94 1a 02 	call	0x434	; 0x434 <add_in_line>
    add_in_line("NM", 31, 63, 63, 95);
     964:	0f e5       	ldi	r16, 0x5F	; 95
     966:	10 e0       	ldi	r17, 0x00	; 0
     968:	2f e3       	ldi	r18, 0x3F	; 63
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	4f e3       	ldi	r20, 0x3F	; 63
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	6f e1       	ldi	r22, 0x1F	; 31
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	81 e9       	ldi	r24, 0x91	; 145
     976:	91 e0       	ldi	r25, 0x01	; 1
     978:	0e 94 1a 02 	call	0x434	; 0x434 <add_in_line>
    add_in_line("NS", 63, 95, 95, 127);
     97c:	0f e7       	ldi	r16, 0x7F	; 127
     97e:	10 e0       	ldi	r17, 0x00	; 0
     980:	2f e5       	ldi	r18, 0x5F	; 95
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	4f e5       	ldi	r20, 0x5F	; 95
     986:	50 e0       	ldi	r21, 0x00	; 0
     988:	6f e3       	ldi	r22, 0x3F	; 63
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	84 e9       	ldi	r24, 0x94	; 148
     98e:	91 e0       	ldi	r25, 0x01	; 1
     990:	0e 94 1a 02 	call	0x434	; 0x434 <add_in_line>
    add_in_line("ZE", 95, 127, 127, 159);
     994:	0f e9       	ldi	r16, 0x9F	; 159
     996:	10 e0       	ldi	r17, 0x00	; 0
     998:	2f e7       	ldi	r18, 0x7F	; 127
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	4f e7       	ldi	r20, 0x7F	; 127
     99e:	50 e0       	ldi	r21, 0x00	; 0
     9a0:	6f e5       	ldi	r22, 0x5F	; 95
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	87 e9       	ldi	r24, 0x97	; 151
     9a6:	91 e0       	ldi	r25, 0x01	; 1
     9a8:	0e 94 1a 02 	call	0x434	; 0x434 <add_in_line>
    add_in_line("PS", 127, 159, 159, 191);
     9ac:	0f eb       	ldi	r16, 0xBF	; 191
     9ae:	10 e0       	ldi	r17, 0x00	; 0
     9b0:	2f e9       	ldi	r18, 0x9F	; 159
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	4f e9       	ldi	r20, 0x9F	; 159
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	6f e7       	ldi	r22, 0x7F	; 127
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	8a e9       	ldi	r24, 0x9A	; 154
     9be:	91 e0       	ldi	r25, 0x01	; 1
     9c0:	0e 94 1a 02 	call	0x434	; 0x434 <add_in_line>
    add_in_line("PM", 159, 191, 191, 223);
     9c4:	0f ed       	ldi	r16, 0xDF	; 223
     9c6:	10 e0       	ldi	r17, 0x00	; 0
     9c8:	2f eb       	ldi	r18, 0xBF	; 191
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	4f eb       	ldi	r20, 0xBF	; 191
     9ce:	50 e0       	ldi	r21, 0x00	; 0
     9d0:	6f e9       	ldi	r22, 0x9F	; 159
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	8d e9       	ldi	r24, 0x9D	; 157
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	0e 94 1a 02 	call	0x434	; 0x434 <add_in_line>
    add_in_line("PL", 191, 223, 223, 255);
     9dc:	0f ef       	ldi	r16, 0xFF	; 255
     9de:	10 e0       	ldi	r17, 0x00	; 0
     9e0:	2f ed       	ldi	r18, 0xDF	; 223
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	4f ed       	ldi	r20, 0xDF	; 223
     9e6:	50 e0       	ldi	r21, 0x00	; 0
     9e8:	6f eb       	ldi	r22, 0xBF	; 191
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	80 ea       	ldi	r24, 0xA0	; 160
     9ee:	91 e0       	ldi	r25, 0x01	; 1
     9f0:	0e 94 1a 02 	call	0x434	; 0x434 <add_in_line>

    /* READ RULES FILE; INITIALIZE STRUCTURES */
    ioptr = NULL;
     9f4:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <ioptr+0x1>
     9f8:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <ioptr>
    outptr = NULL;
     9fc:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <outptr+0x1>
     a00:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <outptr>
    ruleptr = (struct rule_type *)calloc(1, sizeof(struct rule_type));
     a04:	66 e0       	ldi	r22, 0x06	; 6
     a06:	70 e0       	ldi	r23, 0x00	; 0
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	0e 94 50 09 	call	0x12a0	; 0x12a0 <calloc>
     a10:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <ruleptr+0x1>
     a14:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <ruleptr>
    if (ioptr == NULL)
	Rule_Base = ruleptr; /* first time thru, anchor */
     a18:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <Rule_Base+0x1>
     a1c:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <Rule_Base>
    add_rule_line("NL", "ZE", "PL");
     a20:	40 ea       	ldi	r20, 0xA0	; 160
     a22:	51 e0       	ldi	r21, 0x01	; 1
     a24:	67 e9       	ldi	r22, 0x97	; 151
     a26:	71 e0       	ldi	r23, 0x01	; 1
     a28:	8e e8       	ldi	r24, 0x8E	; 142
     a2a:	91 e0       	ldi	r25, 0x01	; 1
     a2c:	0e 94 c7 02 	call	0x58e	; 0x58e <add_rule_line>
    //add_rule_line("ZE", "NL", "PL");
    add_rule_line("NM", "ZE", "PM");
     a30:	4d e9       	ldi	r20, 0x9D	; 157
     a32:	51 e0       	ldi	r21, 0x01	; 1
     a34:	67 e9       	ldi	r22, 0x97	; 151
     a36:	71 e0       	ldi	r23, 0x01	; 1
     a38:	81 e9       	ldi	r24, 0x91	; 145
     a3a:	91 e0       	ldi	r25, 0x01	; 1
     a3c:	0e 94 c7 02 	call	0x58e	; 0x58e <add_rule_line>
    add_rule_line("ZE", "NM", "PM");
     a40:	4d e9       	ldi	r20, 0x9D	; 157
     a42:	51 e0       	ldi	r21, 0x01	; 1
     a44:	61 e9       	ldi	r22, 0x91	; 145
     a46:	71 e0       	ldi	r23, 0x01	; 1
     a48:	87 e9       	ldi	r24, 0x97	; 151
     a4a:	91 e0       	ldi	r25, 0x01	; 1
     a4c:	0e 94 c7 02 	call	0x58e	; 0x58e <add_rule_line>
    add_rule_line("NS", "ZE", "PS");
     a50:	4a e9       	ldi	r20, 0x9A	; 154
     a52:	51 e0       	ldi	r21, 0x01	; 1
     a54:	67 e9       	ldi	r22, 0x97	; 151
     a56:	71 e0       	ldi	r23, 0x01	; 1
     a58:	84 e9       	ldi	r24, 0x94	; 148
     a5a:	91 e0       	ldi	r25, 0x01	; 1
     a5c:	0e 94 c7 02 	call	0x58e	; 0x58e <add_rule_line>
    //add_rule_line("ZE", "NS", "PS");
    add_rule_line("NS", "PS", "PS");
     a60:	4a e9       	ldi	r20, 0x9A	; 154
     a62:	51 e0       	ldi	r21, 0x01	; 1
     a64:	ba 01       	movw	r22, r20
     a66:	84 e9       	ldi	r24, 0x94	; 148
     a68:	91 e0       	ldi	r25, 0x01	; 1
     a6a:	0e 94 c7 02 	call	0x58e	; 0x58e <add_rule_line>
    add_rule_line("ZE", "ZE", "PM");
     a6e:	4d e9       	ldi	r20, 0x9D	; 157
     a70:	51 e0       	ldi	r21, 0x01	; 1
     a72:	67 e9       	ldi	r22, 0x97	; 151
     a74:	71 e0       	ldi	r23, 0x01	; 1
     a76:	cb 01       	movw	r24, r22
     a78:	0e 94 c7 02 	call	0x58e	; 0x58e <add_rule_line>
    add_rule_line("ZE", "PS", "NS");
     a7c:	44 e9       	ldi	r20, 0x94	; 148
     a7e:	51 e0       	ldi	r21, 0x01	; 1
     a80:	6a e9       	ldi	r22, 0x9A	; 154
     a82:	71 e0       	ldi	r23, 0x01	; 1
     a84:	87 e9       	ldi	r24, 0x97	; 151
     a86:	91 e0       	ldi	r25, 0x01	; 1
     a88:	0e 94 c7 02 	call	0x58e	; 0x58e <add_rule_line>
  //add_rule_line("PS", "ZE", "NS");
    add_rule_line("PS", "NS", "NS");
     a8c:	44 e9       	ldi	r20, 0x94	; 148
     a8e:	51 e0       	ldi	r21, 0x01	; 1
     a90:	ba 01       	movw	r22, r20
     a92:	8a e9       	ldi	r24, 0x9A	; 154
     a94:	91 e0       	ldi	r25, 0x01	; 1
     a96:	0e 94 c7 02 	call	0x58e	; 0x58e <add_rule_line>
    add_rule_line("ZE", "PM", "NM");
     a9a:	41 e9       	ldi	r20, 0x91	; 145
     a9c:	51 e0       	ldi	r21, 0x01	; 1
     a9e:	6d e9       	ldi	r22, 0x9D	; 157
     aa0:	71 e0       	ldi	r23, 0x01	; 1
     aa2:	87 e9       	ldi	r24, 0x97	; 151
     aa4:	91 e0       	ldi	r25, 0x01	; 1
     aa6:	0e 94 c7 02 	call	0x58e	; 0x58e <add_rule_line>
    add_rule_line("NM", "ZE", "NM");
     aaa:	41 e9       	ldi	r20, 0x91	; 145
     aac:	51 e0       	ldi	r21, 0x01	; 1
     aae:	67 e9       	ldi	r22, 0x97	; 151
     ab0:	71 e0       	ldi	r23, 0x01	; 1
     ab2:	ca 01       	movw	r24, r20
     ab4:	0e 94 c7 02 	call	0x58e	; 0x58e <add_rule_line>
    //add_rule_line("ZE", "PL", "NL");
    add_rule_line("PL", "ZE", "NL");
     ab8:	4e e8       	ldi	r20, 0x8E	; 142
     aba:	51 e0       	ldi	r21, 0x01	; 1
     abc:	67 e9       	ldi	r22, 0x97	; 151
     abe:	71 e0       	ldi	r23, 0x01	; 1
     ac0:	80 ea       	ldi	r24, 0xA0	; 160
     ac2:	91 e0       	ldi	r25, 0x01	; 1
     ac4:	0e 94 c7 02 	call	0x58e	; 0x58e <add_rule_line>
} /* END INITIALIZE */
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	1f 91       	pop	r17
     ace:	0f 91       	pop	r16
     ad0:	08 95       	ret

00000ad2 <put_system_outputs>:

void put_system_outputs() /* NEW */
{
     ad2:	cf 92       	push	r12
     ad4:	df 92       	push	r13
     ad6:	ef 92       	push	r14
     ad8:	ff 92       	push	r15
     ada:	0f 93       	push	r16
     adc:	1f 93       	push	r17
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
    int cnt = 1;
    for (ioptr = System_Inputs; ioptr != NULL; ioptr = ioptr->next)
     ae2:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <System_Inputs>
     ae6:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <System_Inputs+0x1>
     aea:	f0 93 f7 01 	sts	0x01F7, r31	; 0x8001f7 <ioptr+0x1>
     aee:	e0 93 f6 01 	sts	0x01F6, r30	; 0x8001f6 <ioptr>
     af2:	30 97       	sbiw	r30, 0x00	; 0
     af4:	09 f4       	brne	.+2      	; 0xaf8 <put_system_outputs+0x26>
     af6:	5a c0       	rjmp	.+180    	; 0xbac <put_system_outputs+0xda>
    {
	printf("%s: Value= %d\n", ioptr->name, ioptr->value);
     af8:	02 eb       	ldi	r16, 0xB2	; 178
     afa:	11 e0       	ldi	r17, 0x01	; 1
	for (mfptr = ioptr->membership_functions; mfptr != NULL; mfptr = mfptr->next)
	{
	    printf(" %s: Value %d Left %d Right %d\n",
     afc:	c1 ec       	ldi	r28, 0xC1	; 193
     afe:	d1 e0       	ldi	r29, 0x01	; 1
void put_system_outputs() /* NEW */
{
    int cnt = 1;
    for (ioptr = System_Inputs; ioptr != NULL; ioptr = ioptr->next)
    {
	printf("%s: Value= %d\n", ioptr->name, ioptr->value);
     b00:	83 85       	ldd	r24, Z+11	; 0x0b
     b02:	8f 93       	push	r24
     b04:	82 85       	ldd	r24, Z+10	; 0x0a
     b06:	8f 93       	push	r24
     b08:	ff 93       	push	r31
     b0a:	ef 93       	push	r30
     b0c:	1f 93       	push	r17
     b0e:	0f 93       	push	r16
     b10:	0e 94 b0 0a 	call	0x1560	; 0x1560 <printf>
	for (mfptr = ioptr->membership_functions; mfptr != NULL; mfptr = mfptr->next)
     b14:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <ioptr>
     b18:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <ioptr+0x1>
     b1c:	04 84       	ldd	r0, Z+12	; 0x0c
     b1e:	f5 85       	ldd	r31, Z+13	; 0x0d
     b20:	e0 2d       	mov	r30, r0
     b22:	f0 93 f3 01 	sts	0x01F3, r31	; 0x8001f3 <mfptr+0x1>
     b26:	e0 93 f2 01 	sts	0x01F2, r30	; 0x8001f2 <mfptr>
     b2a:	0f 90       	pop	r0
     b2c:	0f 90       	pop	r0
     b2e:	0f 90       	pop	r0
     b30:	0f 90       	pop	r0
     b32:	0f 90       	pop	r0
     b34:	0f 90       	pop	r0
     b36:	30 97       	sbiw	r30, 0x00	; 0
     b38:	39 f1       	breq	.+78     	; 0xb88 <put_system_outputs+0xb6>
	{
	    printf(" %s: Value %d Left %d Right %d\n",
     b3a:	87 85       	ldd	r24, Z+15	; 0x0f
     b3c:	8f 93       	push	r24
     b3e:	86 85       	ldd	r24, Z+14	; 0x0e
     b40:	8f 93       	push	r24
     b42:	85 85       	ldd	r24, Z+13	; 0x0d
     b44:	8f 93       	push	r24
     b46:	84 85       	ldd	r24, Z+12	; 0x0c
     b48:	8f 93       	push	r24
     b4a:	83 85       	ldd	r24, Z+11	; 0x0b
     b4c:	8f 93       	push	r24
     b4e:	82 85       	ldd	r24, Z+10	; 0x0a
     b50:	8f 93       	push	r24
     b52:	ff 93       	push	r31
     b54:	ef 93       	push	r30
     b56:	df 93       	push	r29
     b58:	cf 93       	push	r28
     b5a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <printf>
{
    int cnt = 1;
    for (ioptr = System_Inputs; ioptr != NULL; ioptr = ioptr->next)
    {
	printf("%s: Value= %d\n", ioptr->name, ioptr->value);
	for (mfptr = ioptr->membership_functions; mfptr != NULL; mfptr = mfptr->next)
     b5e:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mfptr>
     b62:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mfptr+0x1>
     b66:	00 8c       	ldd	r0, Z+24	; 0x18
     b68:	f1 8d       	ldd	r31, Z+25	; 0x19
     b6a:	e0 2d       	mov	r30, r0
     b6c:	f0 93 f3 01 	sts	0x01F3, r31	; 0x8001f3 <mfptr+0x1>
     b70:	e0 93 f2 01 	sts	0x01F2, r30	; 0x8001f2 <mfptr>
     b74:	8d b7       	in	r24, 0x3d	; 61
     b76:	9e b7       	in	r25, 0x3e	; 62
     b78:	0a 96       	adiw	r24, 0x0a	; 10
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	9e bf       	out	0x3e, r25	; 62
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	8d bf       	out	0x3d, r24	; 61
     b84:	30 97       	sbiw	r30, 0x00	; 0
     b86:	c9 f6       	brne	.-78     	; 0xb3a <put_system_outputs+0x68>
	{
	    printf(" %s: Value %d Left %d Right %d\n",
		   mfptr->name, mfptr->value, mfptr->point1, mfptr->point2);
	}
	printf("\n");
     b88:	8a e0       	ldi	r24, 0x0A	; 10
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 c6 0a 	call	0x158c	; 0x158c <putchar>
} /* END INITIALIZE */

void put_system_outputs() /* NEW */
{
    int cnt = 1;
    for (ioptr = System_Inputs; ioptr != NULL; ioptr = ioptr->next)
     b90:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <ioptr>
     b94:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <ioptr+0x1>
     b98:	06 84       	ldd	r0, Z+14	; 0x0e
     b9a:	f7 85       	ldd	r31, Z+15	; 0x0f
     b9c:	e0 2d       	mov	r30, r0
     b9e:	f0 93 f7 01 	sts	0x01F7, r31	; 0x8001f7 <ioptr+0x1>
     ba2:	e0 93 f6 01 	sts	0x01F6, r30	; 0x8001f6 <ioptr>
     ba6:	30 97       	sbiw	r30, 0x00	; 0
     ba8:	09 f0       	breq	.+2      	; 0xbac <put_system_outputs+0xda>
     baa:	aa cf       	rjmp	.-172    	; 0xb00 <put_system_outputs+0x2e>
	    printf(" %s: Value %d Left %d Right %d\n",
		   mfptr->name, mfptr->value, mfptr->point1, mfptr->point2);
	}
	printf("\n");
    }
    for (ioptr = System_Output; ioptr != NULL; ioptr = ioptr->next)
     bac:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <__data_end>
     bb0:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <__data_end+0x1>
     bb4:	f0 93 f7 01 	sts	0x01F7, r31	; 0x8001f7 <ioptr+0x1>
     bb8:	e0 93 f6 01 	sts	0x01F6, r30	; 0x8001f6 <ioptr>
     bbc:	30 97       	sbiw	r30, 0x00	; 0
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <put_system_outputs+0xf0>
     bc0:	56 c0       	rjmp	.+172    	; 0xc6e <put_system_outputs+0x19c>
    {
	printf("%s: Value= %d\n", ioptr->name, ioptr->value);
     bc2:	02 eb       	ldi	r16, 0xB2	; 178
     bc4:	11 e0       	ldi	r17, 0x01	; 1
	for (mfptr = ioptr->membership_functions; mfptr != NULL; mfptr = mfptr->next)
	{
	    printf(" %s: Value %d Left %d Right %d\n",
     bc6:	c1 ec       	ldi	r28, 0xC1	; 193
     bc8:	d1 e0       	ldi	r29, 0x01	; 1
	}
	printf("\n");
    }
    for (ioptr = System_Output; ioptr != NULL; ioptr = ioptr->next)
    {
	printf("%s: Value= %d\n", ioptr->name, ioptr->value);
     bca:	83 85       	ldd	r24, Z+11	; 0x0b
     bcc:	8f 93       	push	r24
     bce:	82 85       	ldd	r24, Z+10	; 0x0a
     bd0:	8f 93       	push	r24
     bd2:	ff 93       	push	r31
     bd4:	ef 93       	push	r30
     bd6:	1f 93       	push	r17
     bd8:	0f 93       	push	r16
     bda:	0e 94 b0 0a 	call	0x1560	; 0x1560 <printf>
	for (mfptr = ioptr->membership_functions; mfptr != NULL; mfptr = mfptr->next)
     bde:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <ioptr>
     be2:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <ioptr+0x1>
     be6:	04 84       	ldd	r0, Z+12	; 0x0c
     be8:	f5 85       	ldd	r31, Z+13	; 0x0d
     bea:	e0 2d       	mov	r30, r0
     bec:	f0 93 f3 01 	sts	0x01F3, r31	; 0x8001f3 <mfptr+0x1>
     bf0:	e0 93 f2 01 	sts	0x01F2, r30	; 0x8001f2 <mfptr>
     bf4:	0f 90       	pop	r0
     bf6:	0f 90       	pop	r0
     bf8:	0f 90       	pop	r0
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	30 97       	sbiw	r30, 0x00	; 0
     c02:	39 f1       	breq	.+78     	; 0xc52 <put_system_outputs+0x180>
	{
	    printf(" %s: Value %d Left %d Right %d\n",
     c04:	87 85       	ldd	r24, Z+15	; 0x0f
     c06:	8f 93       	push	r24
     c08:	86 85       	ldd	r24, Z+14	; 0x0e
     c0a:	8f 93       	push	r24
     c0c:	85 85       	ldd	r24, Z+13	; 0x0d
     c0e:	8f 93       	push	r24
     c10:	84 85       	ldd	r24, Z+12	; 0x0c
     c12:	8f 93       	push	r24
     c14:	83 85       	ldd	r24, Z+11	; 0x0b
     c16:	8f 93       	push	r24
     c18:	82 85       	ldd	r24, Z+10	; 0x0a
     c1a:	8f 93       	push	r24
     c1c:	ff 93       	push	r31
     c1e:	ef 93       	push	r30
     c20:	df 93       	push	r29
     c22:	cf 93       	push	r28
     c24:	0e 94 b0 0a 	call	0x1560	; 0x1560 <printf>
	printf("\n");
    }
    for (ioptr = System_Output; ioptr != NULL; ioptr = ioptr->next)
    {
	printf("%s: Value= %d\n", ioptr->name, ioptr->value);
	for (mfptr = ioptr->membership_functions; mfptr != NULL; mfptr = mfptr->next)
     c28:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mfptr>
     c2c:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mfptr+0x1>
     c30:	00 8c       	ldd	r0, Z+24	; 0x18
     c32:	f1 8d       	ldd	r31, Z+25	; 0x19
     c34:	e0 2d       	mov	r30, r0
     c36:	f0 93 f3 01 	sts	0x01F3, r31	; 0x8001f3 <mfptr+0x1>
     c3a:	e0 93 f2 01 	sts	0x01F2, r30	; 0x8001f2 <mfptr>
     c3e:	8d b7       	in	r24, 0x3d	; 61
     c40:	9e b7       	in	r25, 0x3e	; 62
     c42:	0a 96       	adiw	r24, 0x0a	; 10
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	f8 94       	cli
     c48:	9e bf       	out	0x3e, r25	; 62
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	8d bf       	out	0x3d, r24	; 61
     c4e:	30 97       	sbiw	r30, 0x00	; 0
     c50:	c9 f6       	brne	.-78     	; 0xc04 <put_system_outputs+0x132>
	    printf(" %s: Value %d Left %d Right %d\n",
		   mfptr->name, mfptr->value, mfptr->point1, mfptr->point2);
	}
	printf("\n");
    }
    for (ioptr = System_Output; ioptr != NULL; ioptr = ioptr->next)
     c52:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <ioptr>
     c56:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <ioptr+0x1>
     c5a:	06 84       	ldd	r0, Z+14	; 0x0e
     c5c:	f7 85       	ldd	r31, Z+15	; 0x0f
     c5e:	e0 2d       	mov	r30, r0
     c60:	f0 93 f7 01 	sts	0x01F7, r31	; 0x8001f7 <ioptr+0x1>
     c64:	e0 93 f6 01 	sts	0x01F6, r30	; 0x8001f6 <ioptr>
     c68:	30 97       	sbiw	r30, 0x00	; 0
     c6a:	09 f0       	breq	.+2      	; 0xc6e <put_system_outputs+0x19c>
     c6c:	ae cf       	rjmp	.-164    	; 0xbca <put_system_outputs+0xf8>
	    printf(" %s: Value %d Left %d Right %d\n",
		   mfptr->name, mfptr->value, mfptr->point1, mfptr->point2);
	}
    }
    /* print values pointed to by rule_type (if & then) */
    printf("\n");
     c6e:	8a e0       	ldi	r24, 0x0A	; 10
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	0e 94 c6 0a 	call	0x158c	; 0x158c <putchar>
    for (ruleptr = Rule_Base; ruleptr->next != NULL; ruleptr = ruleptr->next)
     c76:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <Rule_Base>
     c7a:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <Rule_Base+0x1>
     c7e:	f0 93 ff 01 	sts	0x01FF, r31	; 0x8001ff <ruleptr+0x1>
     c82:	e0 93 fe 01 	sts	0x01FE, r30	; 0x8001fe <ruleptr>
     c86:	84 81       	ldd	r24, Z+4	; 0x04
     c88:	95 81       	ldd	r25, Z+5	; 0x05
     c8a:	89 2b       	or	r24, r25
     c8c:	09 f4       	brne	.+2      	; 0xc90 <put_system_outputs+0x1be>
     c8e:	7d c0       	rjmp	.+250    	; 0xd8a <put_system_outputs+0x2b8>
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
    {
	printf("Rule #%d:", cnt++);
     c94:	0f 2e       	mov	r0, r31
     c96:	f1 ee       	ldi	r31, 0xE1	; 225
     c98:	ef 2e       	mov	r14, r31
     c9a:	f1 e0       	ldi	r31, 0x01	; 1
     c9c:	ff 2e       	mov	r15, r31
     c9e:	f0 2d       	mov	r31, r0
	for (ifptr = ruleptr->if_side; ifptr != NULL; ifptr = ifptr->next)
	    printf(" %d", *(ifptr->value));
     ca0:	0b ee       	ldi	r16, 0xEB	; 235
     ca2:	11 e0       	ldi	r17, 0x01	; 1
	for (thenptr = ruleptr->then_side; thenptr != NULL; thenptr = thenptr->next)
	    printf(" %d\n", *(thenptr->value));
     ca4:	cc eb       	ldi	r28, 0xBC	; 188
     ca6:	d1 e0       	ldi	r29, 0x01	; 1
    }
    /* print values pointed to by rule_type (if & then) */
    printf("\n");
    for (ruleptr = Rule_Base; ruleptr->next != NULL; ruleptr = ruleptr->next)
    {
	printf("Rule #%d:", cnt++);
     ca8:	6c 01       	movw	r12, r24
     caa:	2f ef       	ldi	r18, 0xFF	; 255
     cac:	c2 1a       	sub	r12, r18
     cae:	d2 0a       	sbc	r13, r18
     cb0:	9f 93       	push	r25
     cb2:	8f 93       	push	r24
     cb4:	ff 92       	push	r15
     cb6:	ef 92       	push	r14
     cb8:	0e 94 b0 0a 	call	0x1560	; 0x1560 <printf>
	for (ifptr = ruleptr->if_side; ifptr != NULL; ifptr = ifptr->next)
     cbc:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <ruleptr>
     cc0:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <ruleptr+0x1>
     cc4:	01 90       	ld	r0, Z+
     cc6:	f0 81       	ld	r31, Z
     cc8:	e0 2d       	mov	r30, r0
     cca:	f0 93 fd 01 	sts	0x01FD, r31	; 0x8001fd <ifptr+0x1>
     cce:	e0 93 fc 01 	sts	0x01FC, r30	; 0x8001fc <ifptr>
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	30 97       	sbiw	r30, 0x00	; 0
     cdc:	e1 f0       	breq	.+56     	; 0xd16 <put_system_outputs+0x244>
	    printf(" %d", *(ifptr->value));
     cde:	01 90       	ld	r0, Z+
     ce0:	f0 81       	ld	r31, Z
     ce2:	e0 2d       	mov	r30, r0
     ce4:	81 81       	ldd	r24, Z+1	; 0x01
     ce6:	8f 93       	push	r24
     ce8:	80 81       	ld	r24, Z
     cea:	8f 93       	push	r24
     cec:	1f 93       	push	r17
     cee:	0f 93       	push	r16
     cf0:	0e 94 b0 0a 	call	0x1560	; 0x1560 <printf>
    /* print values pointed to by rule_type (if & then) */
    printf("\n");
    for (ruleptr = Rule_Base; ruleptr->next != NULL; ruleptr = ruleptr->next)
    {
	printf("Rule #%d:", cnt++);
	for (ifptr = ruleptr->if_side; ifptr != NULL; ifptr = ifptr->next)
     cf4:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <ifptr>
     cf8:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <ifptr+0x1>
     cfc:	02 80       	ldd	r0, Z+2	; 0x02
     cfe:	f3 81       	ldd	r31, Z+3	; 0x03
     d00:	e0 2d       	mov	r30, r0
     d02:	f0 93 fd 01 	sts	0x01FD, r31	; 0x8001fd <ifptr+0x1>
     d06:	e0 93 fc 01 	sts	0x01FC, r30	; 0x8001fc <ifptr>
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	30 97       	sbiw	r30, 0x00	; 0
     d14:	21 f7       	brne	.-56     	; 0xcde <put_system_outputs+0x20c>
	    printf(" %d", *(ifptr->value));
	for (thenptr = ruleptr->then_side; thenptr != NULL; thenptr = thenptr->next)
     d16:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <ruleptr>
     d1a:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <ruleptr+0x1>
     d1e:	02 80       	ldd	r0, Z+2	; 0x02
     d20:	f3 81       	ldd	r31, Z+3	; 0x03
     d22:	e0 2d       	mov	r30, r0
     d24:	f0 93 f5 01 	sts	0x01F5, r31	; 0x8001f5 <thenptr+0x1>
     d28:	e0 93 f4 01 	sts	0x01F4, r30	; 0x8001f4 <thenptr>
     d2c:	30 97       	sbiw	r30, 0x00	; 0
     d2e:	e1 f0       	breq	.+56     	; 0xd68 <put_system_outputs+0x296>
	    printf(" %d\n", *(thenptr->value));
     d30:	01 90       	ld	r0, Z+
     d32:	f0 81       	ld	r31, Z
     d34:	e0 2d       	mov	r30, r0
     d36:	81 81       	ldd	r24, Z+1	; 0x01
     d38:	8f 93       	push	r24
     d3a:	80 81       	ld	r24, Z
     d3c:	8f 93       	push	r24
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	0e 94 b0 0a 	call	0x1560	; 0x1560 <printf>
    for (ruleptr = Rule_Base; ruleptr->next != NULL; ruleptr = ruleptr->next)
    {
	printf("Rule #%d:", cnt++);
	for (ifptr = ruleptr->if_side; ifptr != NULL; ifptr = ifptr->next)
	    printf(" %d", *(ifptr->value));
	for (thenptr = ruleptr->then_side; thenptr != NULL; thenptr = thenptr->next)
     d46:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <thenptr>
     d4a:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <thenptr+0x1>
     d4e:	02 80       	ldd	r0, Z+2	; 0x02
     d50:	f3 81       	ldd	r31, Z+3	; 0x03
     d52:	e0 2d       	mov	r30, r0
     d54:	f0 93 f5 01 	sts	0x01F5, r31	; 0x8001f5 <thenptr+0x1>
     d58:	e0 93 f4 01 	sts	0x01F4, r30	; 0x8001f4 <thenptr>
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	30 97       	sbiw	r30, 0x00	; 0
     d66:	21 f7       	brne	.-56     	; 0xd30 <put_system_outputs+0x25e>
		   mfptr->name, mfptr->value, mfptr->point1, mfptr->point2);
	}
    }
    /* print values pointed to by rule_type (if & then) */
    printf("\n");
    for (ruleptr = Rule_Base; ruleptr->next != NULL; ruleptr = ruleptr->next)
     d68:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <ruleptr>
     d6c:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <ruleptr+0x1>
     d70:	04 80       	ldd	r0, Z+4	; 0x04
     d72:	f5 81       	ldd	r31, Z+5	; 0x05
     d74:	e0 2d       	mov	r30, r0
     d76:	f0 93 ff 01 	sts	0x01FF, r31	; 0x8001ff <ruleptr+0x1>
     d7a:	e0 93 fe 01 	sts	0x01FE, r30	; 0x8001fe <ruleptr>
    {
	printf("Rule #%d:", cnt++);
     d7e:	c6 01       	movw	r24, r12
		   mfptr->name, mfptr->value, mfptr->point1, mfptr->point2);
	}
    }
    /* print values pointed to by rule_type (if & then) */
    printf("\n");
    for (ruleptr = Rule_Base; ruleptr->next != NULL; ruleptr = ruleptr->next)
     d80:	24 81       	ldd	r18, Z+4	; 0x04
     d82:	35 81       	ldd	r19, Z+5	; 0x05
     d84:	23 2b       	or	r18, r19
     d86:	09 f0       	breq	.+2      	; 0xd8a <put_system_outputs+0x2b8>
     d88:	8f cf       	rjmp	.-226    	; 0xca8 <put_system_outputs+0x1d6>
	for (ifptr = ruleptr->if_side; ifptr != NULL; ifptr = ifptr->next)
	    printf(" %d", *(ifptr->value));
	for (thenptr = ruleptr->then_side; thenptr != NULL; thenptr = thenptr->next)
	    printf(" %d\n", *(thenptr->value));
    }
    printf("\n");
     d8a:	8a e0       	ldi	r24, 0x0A	; 10
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	0e 94 c6 0a 	call	0x158c	; 0x158c <putchar>
} /* END PUT SYSTEM OUTPUTS */
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	1f 91       	pop	r17
     d98:	0f 91       	pop	r16
     d9a:	ff 90       	pop	r15
     d9c:	ef 90       	pop	r14
     d9e:	df 90       	pop	r13
     da0:	cf 90       	pop	r12
     da2:	08 95       	ret

00000da4 <get_system_inputs>:
void get_system_inputs(int input1, int input2) /* NEW */
{
    struct io_type *ioptr;
    ioptr = System_Inputs;
     da4:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <System_Inputs>
     da8:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <System_Inputs+0x1>
    ioptr->value = input1;
     dac:	93 87       	std	Z+11, r25	; 0x0b
     dae:	82 87       	std	Z+10, r24	; 0x0a
    ioptr = ioptr->next;
     db0:	06 84       	ldd	r0, Z+14	; 0x0e
     db2:	f7 85       	ldd	r31, Z+15	; 0x0f
     db4:	e0 2d       	mov	r30, r0
    ioptr->value = input2;
     db6:	73 87       	std	Z+11, r23	; 0x0b
     db8:	62 87       	std	Z+10, r22	; 0x0a
     dba:	08 95       	ret

00000dbc <main>:
int main()
{
    int input1, input2;		       /* NEW */
    input1 = 60;		       /* NEW */
    input2 = 125;		       /* NEW */
    initialize_system();	       /* Read input files, NEW */
     dbc:	0e 94 9e 03 	call	0x73c	; 0x73c <initialize_system>
    get_system_inputs(input1, input2); /* Get & put argv NEW */
     dc0:	6d e7       	ldi	r22, 0x7D	; 125
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	8c e3       	ldi	r24, 0x3C	; 60
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	0e 94 d2 06 	call	0xda4	; 0xda4 <get_system_inputs>
    fuzzification();
     dcc:	0e 94 1c 01 	call	0x238	; 0x238 <fuzzification>
    rule_evaluation();
     dd0:	0e 94 54 00 	call	0xa8	; 0xa8 <rule_evaluation>
    defuzzification();
     dd4:	0e 94 a6 01 	call	0x34c	; 0x34c <defuzzification>
    put_system_outputs(); /* print all data, NEW */
     dd8:	0e 94 69 05 	call	0xad2	; 0xad2 <put_system_outputs>
    while (1)
	;
     ddc:	ff cf       	rjmp	.-2      	; 0xddc <main+0x20>

00000dde <__subsf3>:
     dde:	50 58       	subi	r21, 0x80	; 128

00000de0 <__addsf3>:
     de0:	bb 27       	eor	r27, r27
     de2:	aa 27       	eor	r26, r26
     de4:	0e 94 07 07 	call	0xe0e	; 0xe0e <__addsf3x>
     de8:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <__fp_round>
     dec:	0e 94 4a 08 	call	0x1094	; 0x1094 <__fp_pscA>
     df0:	38 f0       	brcs	.+14     	; 0xe00 <__addsf3+0x20>
     df2:	0e 94 51 08 	call	0x10a2	; 0x10a2 <__fp_pscB>
     df6:	20 f0       	brcs	.+8      	; 0xe00 <__addsf3+0x20>
     df8:	39 f4       	brne	.+14     	; 0xe08 <__addsf3+0x28>
     dfa:	9f 3f       	cpi	r25, 0xFF	; 255
     dfc:	19 f4       	brne	.+6      	; 0xe04 <__addsf3+0x24>
     dfe:	26 f4       	brtc	.+8      	; 0xe08 <__addsf3+0x28>
     e00:	0c 94 47 08 	jmp	0x108e	; 0x108e <__fp_nan>
     e04:	0e f4       	brtc	.+2      	; 0xe08 <__addsf3+0x28>
     e06:	e0 95       	com	r30
     e08:	e7 fb       	bst	r30, 7
     e0a:	0c 94 41 08 	jmp	0x1082	; 0x1082 <__fp_inf>

00000e0e <__addsf3x>:
     e0e:	e9 2f       	mov	r30, r25
     e10:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__fp_split3>
     e14:	58 f3       	brcs	.-42     	; 0xdec <__addsf3+0xc>
     e16:	ba 17       	cp	r27, r26
     e18:	62 07       	cpc	r22, r18
     e1a:	73 07       	cpc	r23, r19
     e1c:	84 07       	cpc	r24, r20
     e1e:	95 07       	cpc	r25, r21
     e20:	20 f0       	brcs	.+8      	; 0xe2a <__addsf3x+0x1c>
     e22:	79 f4       	brne	.+30     	; 0xe42 <__addsf3x+0x34>
     e24:	a6 f5       	brtc	.+104    	; 0xe8e <__addsf3x+0x80>
     e26:	0c 94 8b 08 	jmp	0x1116	; 0x1116 <__fp_zero>
     e2a:	0e f4       	brtc	.+2      	; 0xe2e <__addsf3x+0x20>
     e2c:	e0 95       	com	r30
     e2e:	0b 2e       	mov	r0, r27
     e30:	ba 2f       	mov	r27, r26
     e32:	a0 2d       	mov	r26, r0
     e34:	0b 01       	movw	r0, r22
     e36:	b9 01       	movw	r22, r18
     e38:	90 01       	movw	r18, r0
     e3a:	0c 01       	movw	r0, r24
     e3c:	ca 01       	movw	r24, r20
     e3e:	a0 01       	movw	r20, r0
     e40:	11 24       	eor	r1, r1
     e42:	ff 27       	eor	r31, r31
     e44:	59 1b       	sub	r21, r25
     e46:	99 f0       	breq	.+38     	; 0xe6e <__addsf3x+0x60>
     e48:	59 3f       	cpi	r21, 0xF9	; 249
     e4a:	50 f4       	brcc	.+20     	; 0xe60 <__addsf3x+0x52>
     e4c:	50 3e       	cpi	r21, 0xE0	; 224
     e4e:	68 f1       	brcs	.+90     	; 0xeaa <__addsf3x+0x9c>
     e50:	1a 16       	cp	r1, r26
     e52:	f0 40       	sbci	r31, 0x00	; 0
     e54:	a2 2f       	mov	r26, r18
     e56:	23 2f       	mov	r18, r19
     e58:	34 2f       	mov	r19, r20
     e5a:	44 27       	eor	r20, r20
     e5c:	58 5f       	subi	r21, 0xF8	; 248
     e5e:	f3 cf       	rjmp	.-26     	; 0xe46 <__addsf3x+0x38>
     e60:	46 95       	lsr	r20
     e62:	37 95       	ror	r19
     e64:	27 95       	ror	r18
     e66:	a7 95       	ror	r26
     e68:	f0 40       	sbci	r31, 0x00	; 0
     e6a:	53 95       	inc	r21
     e6c:	c9 f7       	brne	.-14     	; 0xe60 <__addsf3x+0x52>
     e6e:	7e f4       	brtc	.+30     	; 0xe8e <__addsf3x+0x80>
     e70:	1f 16       	cp	r1, r31
     e72:	ba 0b       	sbc	r27, r26
     e74:	62 0b       	sbc	r22, r18
     e76:	73 0b       	sbc	r23, r19
     e78:	84 0b       	sbc	r24, r20
     e7a:	ba f0       	brmi	.+46     	; 0xeaa <__addsf3x+0x9c>
     e7c:	91 50       	subi	r25, 0x01	; 1
     e7e:	a1 f0       	breq	.+40     	; 0xea8 <__addsf3x+0x9a>
     e80:	ff 0f       	add	r31, r31
     e82:	bb 1f       	adc	r27, r27
     e84:	66 1f       	adc	r22, r22
     e86:	77 1f       	adc	r23, r23
     e88:	88 1f       	adc	r24, r24
     e8a:	c2 f7       	brpl	.-16     	; 0xe7c <__addsf3x+0x6e>
     e8c:	0e c0       	rjmp	.+28     	; 0xeaa <__addsf3x+0x9c>
     e8e:	ba 0f       	add	r27, r26
     e90:	62 1f       	adc	r22, r18
     e92:	73 1f       	adc	r23, r19
     e94:	84 1f       	adc	r24, r20
     e96:	48 f4       	brcc	.+18     	; 0xeaa <__addsf3x+0x9c>
     e98:	87 95       	ror	r24
     e9a:	77 95       	ror	r23
     e9c:	67 95       	ror	r22
     e9e:	b7 95       	ror	r27
     ea0:	f7 95       	ror	r31
     ea2:	9e 3f       	cpi	r25, 0xFE	; 254
     ea4:	08 f0       	brcs	.+2      	; 0xea8 <__addsf3x+0x9a>
     ea6:	b0 cf       	rjmp	.-160    	; 0xe08 <__addsf3+0x28>
     ea8:	93 95       	inc	r25
     eaa:	88 0f       	add	r24, r24
     eac:	08 f0       	brcs	.+2      	; 0xeb0 <__addsf3x+0xa2>
     eae:	99 27       	eor	r25, r25
     eb0:	ee 0f       	add	r30, r30
     eb2:	97 95       	ror	r25
     eb4:	87 95       	ror	r24
     eb6:	08 95       	ret

00000eb8 <__divsf3>:
     eb8:	0e 94 70 07 	call	0xee0	; 0xee0 <__divsf3x>
     ebc:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <__fp_round>
     ec0:	0e 94 51 08 	call	0x10a2	; 0x10a2 <__fp_pscB>
     ec4:	58 f0       	brcs	.+22     	; 0xedc <__divsf3+0x24>
     ec6:	0e 94 4a 08 	call	0x1094	; 0x1094 <__fp_pscA>
     eca:	40 f0       	brcs	.+16     	; 0xedc <__divsf3+0x24>
     ecc:	29 f4       	brne	.+10     	; 0xed8 <__divsf3+0x20>
     ece:	5f 3f       	cpi	r21, 0xFF	; 255
     ed0:	29 f0       	breq	.+10     	; 0xedc <__divsf3+0x24>
     ed2:	0c 94 41 08 	jmp	0x1082	; 0x1082 <__fp_inf>
     ed6:	51 11       	cpse	r21, r1
     ed8:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__fp_szero>
     edc:	0c 94 47 08 	jmp	0x108e	; 0x108e <__fp_nan>

00000ee0 <__divsf3x>:
     ee0:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__fp_split3>
     ee4:	68 f3       	brcs	.-38     	; 0xec0 <__divsf3+0x8>

00000ee6 <__divsf3_pse>:
     ee6:	99 23       	and	r25, r25
     ee8:	b1 f3       	breq	.-20     	; 0xed6 <__divsf3+0x1e>
     eea:	55 23       	and	r21, r21
     eec:	91 f3       	breq	.-28     	; 0xed2 <__divsf3+0x1a>
     eee:	95 1b       	sub	r25, r21
     ef0:	55 0b       	sbc	r21, r21
     ef2:	bb 27       	eor	r27, r27
     ef4:	aa 27       	eor	r26, r26
     ef6:	62 17       	cp	r22, r18
     ef8:	73 07       	cpc	r23, r19
     efa:	84 07       	cpc	r24, r20
     efc:	38 f0       	brcs	.+14     	; 0xf0c <__divsf3_pse+0x26>
     efe:	9f 5f       	subi	r25, 0xFF	; 255
     f00:	5f 4f       	sbci	r21, 0xFF	; 255
     f02:	22 0f       	add	r18, r18
     f04:	33 1f       	adc	r19, r19
     f06:	44 1f       	adc	r20, r20
     f08:	aa 1f       	adc	r26, r26
     f0a:	a9 f3       	breq	.-22     	; 0xef6 <__divsf3_pse+0x10>
     f0c:	35 d0       	rcall	.+106    	; 0xf78 <__divsf3_pse+0x92>
     f0e:	0e 2e       	mov	r0, r30
     f10:	3a f0       	brmi	.+14     	; 0xf20 <__divsf3_pse+0x3a>
     f12:	e0 e8       	ldi	r30, 0x80	; 128
     f14:	32 d0       	rcall	.+100    	; 0xf7a <__divsf3_pse+0x94>
     f16:	91 50       	subi	r25, 0x01	; 1
     f18:	50 40       	sbci	r21, 0x00	; 0
     f1a:	e6 95       	lsr	r30
     f1c:	00 1c       	adc	r0, r0
     f1e:	ca f7       	brpl	.-14     	; 0xf12 <__divsf3_pse+0x2c>
     f20:	2b d0       	rcall	.+86     	; 0xf78 <__divsf3_pse+0x92>
     f22:	fe 2f       	mov	r31, r30
     f24:	29 d0       	rcall	.+82     	; 0xf78 <__divsf3_pse+0x92>
     f26:	66 0f       	add	r22, r22
     f28:	77 1f       	adc	r23, r23
     f2a:	88 1f       	adc	r24, r24
     f2c:	bb 1f       	adc	r27, r27
     f2e:	26 17       	cp	r18, r22
     f30:	37 07       	cpc	r19, r23
     f32:	48 07       	cpc	r20, r24
     f34:	ab 07       	cpc	r26, r27
     f36:	b0 e8       	ldi	r27, 0x80	; 128
     f38:	09 f0       	breq	.+2      	; 0xf3c <__divsf3_pse+0x56>
     f3a:	bb 0b       	sbc	r27, r27
     f3c:	80 2d       	mov	r24, r0
     f3e:	bf 01       	movw	r22, r30
     f40:	ff 27       	eor	r31, r31
     f42:	93 58       	subi	r25, 0x83	; 131
     f44:	5f 4f       	sbci	r21, 0xFF	; 255
     f46:	3a f0       	brmi	.+14     	; 0xf56 <__divsf3_pse+0x70>
     f48:	9e 3f       	cpi	r25, 0xFE	; 254
     f4a:	51 05       	cpc	r21, r1
     f4c:	78 f0       	brcs	.+30     	; 0xf6c <__divsf3_pse+0x86>
     f4e:	0c 94 41 08 	jmp	0x1082	; 0x1082 <__fp_inf>
     f52:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__fp_szero>
     f56:	5f 3f       	cpi	r21, 0xFF	; 255
     f58:	e4 f3       	brlt	.-8      	; 0xf52 <__divsf3_pse+0x6c>
     f5a:	98 3e       	cpi	r25, 0xE8	; 232
     f5c:	d4 f3       	brlt	.-12     	; 0xf52 <__divsf3_pse+0x6c>
     f5e:	86 95       	lsr	r24
     f60:	77 95       	ror	r23
     f62:	67 95       	ror	r22
     f64:	b7 95       	ror	r27
     f66:	f7 95       	ror	r31
     f68:	9f 5f       	subi	r25, 0xFF	; 255
     f6a:	c9 f7       	brne	.-14     	; 0xf5e <__divsf3_pse+0x78>
     f6c:	88 0f       	add	r24, r24
     f6e:	91 1d       	adc	r25, r1
     f70:	96 95       	lsr	r25
     f72:	87 95       	ror	r24
     f74:	97 f9       	bld	r25, 7
     f76:	08 95       	ret
     f78:	e1 e0       	ldi	r30, 0x01	; 1
     f7a:	66 0f       	add	r22, r22
     f7c:	77 1f       	adc	r23, r23
     f7e:	88 1f       	adc	r24, r24
     f80:	bb 1f       	adc	r27, r27
     f82:	62 17       	cp	r22, r18
     f84:	73 07       	cpc	r23, r19
     f86:	84 07       	cpc	r24, r20
     f88:	ba 07       	cpc	r27, r26
     f8a:	20 f0       	brcs	.+8      	; 0xf94 <__divsf3_pse+0xae>
     f8c:	62 1b       	sub	r22, r18
     f8e:	73 0b       	sbc	r23, r19
     f90:	84 0b       	sbc	r24, r20
     f92:	ba 0b       	sbc	r27, r26
     f94:	ee 1f       	adc	r30, r30
     f96:	88 f7       	brcc	.-30     	; 0xf7a <__divsf3_pse+0x94>
     f98:	e0 95       	com	r30
     f9a:	08 95       	ret

00000f9c <__fixsfsi>:
     f9c:	0e 94 d5 07 	call	0xfaa	; 0xfaa <__fixunssfsi>
     fa0:	68 94       	set
     fa2:	b1 11       	cpse	r27, r1
     fa4:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__fp_szero>
     fa8:	08 95       	ret

00000faa <__fixunssfsi>:
     faa:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__fp_splitA>
     fae:	88 f0       	brcs	.+34     	; 0xfd2 <__fixunssfsi+0x28>
     fb0:	9f 57       	subi	r25, 0x7F	; 127
     fb2:	98 f0       	brcs	.+38     	; 0xfda <__fixunssfsi+0x30>
     fb4:	b9 2f       	mov	r27, r25
     fb6:	99 27       	eor	r25, r25
     fb8:	b7 51       	subi	r27, 0x17	; 23
     fba:	b0 f0       	brcs	.+44     	; 0xfe8 <__fixunssfsi+0x3e>
     fbc:	e1 f0       	breq	.+56     	; 0xff6 <__fixunssfsi+0x4c>
     fbe:	66 0f       	add	r22, r22
     fc0:	77 1f       	adc	r23, r23
     fc2:	88 1f       	adc	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	1a f0       	brmi	.+6      	; 0xfce <__fixunssfsi+0x24>
     fc8:	ba 95       	dec	r27
     fca:	c9 f7       	brne	.-14     	; 0xfbe <__fixunssfsi+0x14>
     fcc:	14 c0       	rjmp	.+40     	; 0xff6 <__fixunssfsi+0x4c>
     fce:	b1 30       	cpi	r27, 0x01	; 1
     fd0:	91 f0       	breq	.+36     	; 0xff6 <__fixunssfsi+0x4c>
     fd2:	0e 94 8b 08 	call	0x1116	; 0x1116 <__fp_zero>
     fd6:	b1 e0       	ldi	r27, 0x01	; 1
     fd8:	08 95       	ret
     fda:	0c 94 8b 08 	jmp	0x1116	; 0x1116 <__fp_zero>
     fde:	67 2f       	mov	r22, r23
     fe0:	78 2f       	mov	r23, r24
     fe2:	88 27       	eor	r24, r24
     fe4:	b8 5f       	subi	r27, 0xF8	; 248
     fe6:	39 f0       	breq	.+14     	; 0xff6 <__fixunssfsi+0x4c>
     fe8:	b9 3f       	cpi	r27, 0xF9	; 249
     fea:	cc f3       	brlt	.-14     	; 0xfde <__fixunssfsi+0x34>
     fec:	86 95       	lsr	r24
     fee:	77 95       	ror	r23
     ff0:	67 95       	ror	r22
     ff2:	b3 95       	inc	r27
     ff4:	d9 f7       	brne	.-10     	; 0xfec <__fixunssfsi+0x42>
     ff6:	3e f4       	brtc	.+14     	; 0x1006 <__fixunssfsi+0x5c>
     ff8:	90 95       	com	r25
     ffa:	80 95       	com	r24
     ffc:	70 95       	com	r23
     ffe:	61 95       	neg	r22
    1000:	7f 4f       	sbci	r23, 0xFF	; 255
    1002:	8f 4f       	sbci	r24, 0xFF	; 255
    1004:	9f 4f       	sbci	r25, 0xFF	; 255
    1006:	08 95       	ret

00001008 <__floatunsisf>:
    1008:	e8 94       	clt
    100a:	09 c0       	rjmp	.+18     	; 0x101e <__floatsisf+0x12>

0000100c <__floatsisf>:
    100c:	97 fb       	bst	r25, 7
    100e:	3e f4       	brtc	.+14     	; 0x101e <__floatsisf+0x12>
    1010:	90 95       	com	r25
    1012:	80 95       	com	r24
    1014:	70 95       	com	r23
    1016:	61 95       	neg	r22
    1018:	7f 4f       	sbci	r23, 0xFF	; 255
    101a:	8f 4f       	sbci	r24, 0xFF	; 255
    101c:	9f 4f       	sbci	r25, 0xFF	; 255
    101e:	99 23       	and	r25, r25
    1020:	a9 f0       	breq	.+42     	; 0x104c <__floatsisf+0x40>
    1022:	f9 2f       	mov	r31, r25
    1024:	96 e9       	ldi	r25, 0x96	; 150
    1026:	bb 27       	eor	r27, r27
    1028:	93 95       	inc	r25
    102a:	f6 95       	lsr	r31
    102c:	87 95       	ror	r24
    102e:	77 95       	ror	r23
    1030:	67 95       	ror	r22
    1032:	b7 95       	ror	r27
    1034:	f1 11       	cpse	r31, r1
    1036:	f8 cf       	rjmp	.-16     	; 0x1028 <__floatsisf+0x1c>
    1038:	fa f4       	brpl	.+62     	; 0x1078 <__floatsisf+0x6c>
    103a:	bb 0f       	add	r27, r27
    103c:	11 f4       	brne	.+4      	; 0x1042 <__floatsisf+0x36>
    103e:	60 ff       	sbrs	r22, 0
    1040:	1b c0       	rjmp	.+54     	; 0x1078 <__floatsisf+0x6c>
    1042:	6f 5f       	subi	r22, 0xFF	; 255
    1044:	7f 4f       	sbci	r23, 0xFF	; 255
    1046:	8f 4f       	sbci	r24, 0xFF	; 255
    1048:	9f 4f       	sbci	r25, 0xFF	; 255
    104a:	16 c0       	rjmp	.+44     	; 0x1078 <__floatsisf+0x6c>
    104c:	88 23       	and	r24, r24
    104e:	11 f0       	breq	.+4      	; 0x1054 <__floatsisf+0x48>
    1050:	96 e9       	ldi	r25, 0x96	; 150
    1052:	11 c0       	rjmp	.+34     	; 0x1076 <__floatsisf+0x6a>
    1054:	77 23       	and	r23, r23
    1056:	21 f0       	breq	.+8      	; 0x1060 <__floatsisf+0x54>
    1058:	9e e8       	ldi	r25, 0x8E	; 142
    105a:	87 2f       	mov	r24, r23
    105c:	76 2f       	mov	r23, r22
    105e:	05 c0       	rjmp	.+10     	; 0x106a <__floatsisf+0x5e>
    1060:	66 23       	and	r22, r22
    1062:	71 f0       	breq	.+28     	; 0x1080 <__floatsisf+0x74>
    1064:	96 e8       	ldi	r25, 0x86	; 134
    1066:	86 2f       	mov	r24, r22
    1068:	70 e0       	ldi	r23, 0x00	; 0
    106a:	60 e0       	ldi	r22, 0x00	; 0
    106c:	2a f0       	brmi	.+10     	; 0x1078 <__floatsisf+0x6c>
    106e:	9a 95       	dec	r25
    1070:	66 0f       	add	r22, r22
    1072:	77 1f       	adc	r23, r23
    1074:	88 1f       	adc	r24, r24
    1076:	da f7       	brpl	.-10     	; 0x106e <__floatsisf+0x62>
    1078:	88 0f       	add	r24, r24
    107a:	96 95       	lsr	r25
    107c:	87 95       	ror	r24
    107e:	97 f9       	bld	r25, 7
    1080:	08 95       	ret

00001082 <__fp_inf>:
    1082:	97 f9       	bld	r25, 7
    1084:	9f 67       	ori	r25, 0x7F	; 127
    1086:	80 e8       	ldi	r24, 0x80	; 128
    1088:	70 e0       	ldi	r23, 0x00	; 0
    108a:	60 e0       	ldi	r22, 0x00	; 0
    108c:	08 95       	ret

0000108e <__fp_nan>:
    108e:	9f ef       	ldi	r25, 0xFF	; 255
    1090:	80 ec       	ldi	r24, 0xC0	; 192
    1092:	08 95       	ret

00001094 <__fp_pscA>:
    1094:	00 24       	eor	r0, r0
    1096:	0a 94       	dec	r0
    1098:	16 16       	cp	r1, r22
    109a:	17 06       	cpc	r1, r23
    109c:	18 06       	cpc	r1, r24
    109e:	09 06       	cpc	r0, r25
    10a0:	08 95       	ret

000010a2 <__fp_pscB>:
    10a2:	00 24       	eor	r0, r0
    10a4:	0a 94       	dec	r0
    10a6:	12 16       	cp	r1, r18
    10a8:	13 06       	cpc	r1, r19
    10aa:	14 06       	cpc	r1, r20
    10ac:	05 06       	cpc	r0, r21
    10ae:	08 95       	ret

000010b0 <__fp_round>:
    10b0:	09 2e       	mov	r0, r25
    10b2:	03 94       	inc	r0
    10b4:	00 0c       	add	r0, r0
    10b6:	11 f4       	brne	.+4      	; 0x10bc <__fp_round+0xc>
    10b8:	88 23       	and	r24, r24
    10ba:	52 f0       	brmi	.+20     	; 0x10d0 <__fp_round+0x20>
    10bc:	bb 0f       	add	r27, r27
    10be:	40 f4       	brcc	.+16     	; 0x10d0 <__fp_round+0x20>
    10c0:	bf 2b       	or	r27, r31
    10c2:	11 f4       	brne	.+4      	; 0x10c8 <__fp_round+0x18>
    10c4:	60 ff       	sbrs	r22, 0
    10c6:	04 c0       	rjmp	.+8      	; 0x10d0 <__fp_round+0x20>
    10c8:	6f 5f       	subi	r22, 0xFF	; 255
    10ca:	7f 4f       	sbci	r23, 0xFF	; 255
    10cc:	8f 4f       	sbci	r24, 0xFF	; 255
    10ce:	9f 4f       	sbci	r25, 0xFF	; 255
    10d0:	08 95       	ret

000010d2 <__fp_split3>:
    10d2:	57 fd       	sbrc	r21, 7
    10d4:	90 58       	subi	r25, 0x80	; 128
    10d6:	44 0f       	add	r20, r20
    10d8:	55 1f       	adc	r21, r21
    10da:	59 f0       	breq	.+22     	; 0x10f2 <__fp_splitA+0x10>
    10dc:	5f 3f       	cpi	r21, 0xFF	; 255
    10de:	71 f0       	breq	.+28     	; 0x10fc <__fp_splitA+0x1a>
    10e0:	47 95       	ror	r20

000010e2 <__fp_splitA>:
    10e2:	88 0f       	add	r24, r24
    10e4:	97 fb       	bst	r25, 7
    10e6:	99 1f       	adc	r25, r25
    10e8:	61 f0       	breq	.+24     	; 0x1102 <__fp_splitA+0x20>
    10ea:	9f 3f       	cpi	r25, 0xFF	; 255
    10ec:	79 f0       	breq	.+30     	; 0x110c <__fp_splitA+0x2a>
    10ee:	87 95       	ror	r24
    10f0:	08 95       	ret
    10f2:	12 16       	cp	r1, r18
    10f4:	13 06       	cpc	r1, r19
    10f6:	14 06       	cpc	r1, r20
    10f8:	55 1f       	adc	r21, r21
    10fa:	f2 cf       	rjmp	.-28     	; 0x10e0 <__fp_split3+0xe>
    10fc:	46 95       	lsr	r20
    10fe:	f1 df       	rcall	.-30     	; 0x10e2 <__fp_splitA>
    1100:	08 c0       	rjmp	.+16     	; 0x1112 <__fp_splitA+0x30>
    1102:	16 16       	cp	r1, r22
    1104:	17 06       	cpc	r1, r23
    1106:	18 06       	cpc	r1, r24
    1108:	99 1f       	adc	r25, r25
    110a:	f1 cf       	rjmp	.-30     	; 0x10ee <__fp_splitA+0xc>
    110c:	86 95       	lsr	r24
    110e:	71 05       	cpc	r23, r1
    1110:	61 05       	cpc	r22, r1
    1112:	08 94       	sec
    1114:	08 95       	ret

00001116 <__fp_zero>:
    1116:	e8 94       	clt

00001118 <__fp_szero>:
    1118:	bb 27       	eor	r27, r27
    111a:	66 27       	eor	r22, r22
    111c:	77 27       	eor	r23, r23
    111e:	cb 01       	movw	r24, r22
    1120:	97 f9       	bld	r25, 7
    1122:	08 95       	ret

00001124 <__gesf2>:
    1124:	0e 94 04 09 	call	0x1208	; 0x1208 <__fp_cmp>
    1128:	08 f4       	brcc	.+2      	; 0x112c <__gesf2+0x8>
    112a:	8f ef       	ldi	r24, 0xFF	; 255
    112c:	08 95       	ret

0000112e <__mulsf3>:
    112e:	0e 94 aa 08 	call	0x1154	; 0x1154 <__mulsf3x>
    1132:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <__fp_round>
    1136:	0e 94 4a 08 	call	0x1094	; 0x1094 <__fp_pscA>
    113a:	38 f0       	brcs	.+14     	; 0x114a <__mulsf3+0x1c>
    113c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <__fp_pscB>
    1140:	20 f0       	brcs	.+8      	; 0x114a <__mulsf3+0x1c>
    1142:	95 23       	and	r25, r21
    1144:	11 f0       	breq	.+4      	; 0x114a <__mulsf3+0x1c>
    1146:	0c 94 41 08 	jmp	0x1082	; 0x1082 <__fp_inf>
    114a:	0c 94 47 08 	jmp	0x108e	; 0x108e <__fp_nan>
    114e:	11 24       	eor	r1, r1
    1150:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__fp_szero>

00001154 <__mulsf3x>:
    1154:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__fp_split3>
    1158:	70 f3       	brcs	.-36     	; 0x1136 <__mulsf3+0x8>

0000115a <__mulsf3_pse>:
    115a:	95 9f       	mul	r25, r21
    115c:	c1 f3       	breq	.-16     	; 0x114e <__mulsf3+0x20>
    115e:	95 0f       	add	r25, r21
    1160:	50 e0       	ldi	r21, 0x00	; 0
    1162:	55 1f       	adc	r21, r21
    1164:	62 9f       	mul	r22, r18
    1166:	f0 01       	movw	r30, r0
    1168:	72 9f       	mul	r23, r18
    116a:	bb 27       	eor	r27, r27
    116c:	f0 0d       	add	r31, r0
    116e:	b1 1d       	adc	r27, r1
    1170:	63 9f       	mul	r22, r19
    1172:	aa 27       	eor	r26, r26
    1174:	f0 0d       	add	r31, r0
    1176:	b1 1d       	adc	r27, r1
    1178:	aa 1f       	adc	r26, r26
    117a:	64 9f       	mul	r22, r20
    117c:	66 27       	eor	r22, r22
    117e:	b0 0d       	add	r27, r0
    1180:	a1 1d       	adc	r26, r1
    1182:	66 1f       	adc	r22, r22
    1184:	82 9f       	mul	r24, r18
    1186:	22 27       	eor	r18, r18
    1188:	b0 0d       	add	r27, r0
    118a:	a1 1d       	adc	r26, r1
    118c:	62 1f       	adc	r22, r18
    118e:	73 9f       	mul	r23, r19
    1190:	b0 0d       	add	r27, r0
    1192:	a1 1d       	adc	r26, r1
    1194:	62 1f       	adc	r22, r18
    1196:	83 9f       	mul	r24, r19
    1198:	a0 0d       	add	r26, r0
    119a:	61 1d       	adc	r22, r1
    119c:	22 1f       	adc	r18, r18
    119e:	74 9f       	mul	r23, r20
    11a0:	33 27       	eor	r19, r19
    11a2:	a0 0d       	add	r26, r0
    11a4:	61 1d       	adc	r22, r1
    11a6:	23 1f       	adc	r18, r19
    11a8:	84 9f       	mul	r24, r20
    11aa:	60 0d       	add	r22, r0
    11ac:	21 1d       	adc	r18, r1
    11ae:	82 2f       	mov	r24, r18
    11b0:	76 2f       	mov	r23, r22
    11b2:	6a 2f       	mov	r22, r26
    11b4:	11 24       	eor	r1, r1
    11b6:	9f 57       	subi	r25, 0x7F	; 127
    11b8:	50 40       	sbci	r21, 0x00	; 0
    11ba:	9a f0       	brmi	.+38     	; 0x11e2 <__mulsf3_pse+0x88>
    11bc:	f1 f0       	breq	.+60     	; 0x11fa <__mulsf3_pse+0xa0>
    11be:	88 23       	and	r24, r24
    11c0:	4a f0       	brmi	.+18     	; 0x11d4 <__mulsf3_pse+0x7a>
    11c2:	ee 0f       	add	r30, r30
    11c4:	ff 1f       	adc	r31, r31
    11c6:	bb 1f       	adc	r27, r27
    11c8:	66 1f       	adc	r22, r22
    11ca:	77 1f       	adc	r23, r23
    11cc:	88 1f       	adc	r24, r24
    11ce:	91 50       	subi	r25, 0x01	; 1
    11d0:	50 40       	sbci	r21, 0x00	; 0
    11d2:	a9 f7       	brne	.-22     	; 0x11be <__mulsf3_pse+0x64>
    11d4:	9e 3f       	cpi	r25, 0xFE	; 254
    11d6:	51 05       	cpc	r21, r1
    11d8:	80 f0       	brcs	.+32     	; 0x11fa <__mulsf3_pse+0xa0>
    11da:	0c 94 41 08 	jmp	0x1082	; 0x1082 <__fp_inf>
    11de:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__fp_szero>
    11e2:	5f 3f       	cpi	r21, 0xFF	; 255
    11e4:	e4 f3       	brlt	.-8      	; 0x11de <__mulsf3_pse+0x84>
    11e6:	98 3e       	cpi	r25, 0xE8	; 232
    11e8:	d4 f3       	brlt	.-12     	; 0x11de <__mulsf3_pse+0x84>
    11ea:	86 95       	lsr	r24
    11ec:	77 95       	ror	r23
    11ee:	67 95       	ror	r22
    11f0:	b7 95       	ror	r27
    11f2:	f7 95       	ror	r31
    11f4:	e7 95       	ror	r30
    11f6:	9f 5f       	subi	r25, 0xFF	; 255
    11f8:	c1 f7       	brne	.-16     	; 0x11ea <__mulsf3_pse+0x90>
    11fa:	fe 2b       	or	r31, r30
    11fc:	88 0f       	add	r24, r24
    11fe:	91 1d       	adc	r25, r1
    1200:	96 95       	lsr	r25
    1202:	87 95       	ror	r24
    1204:	97 f9       	bld	r25, 7
    1206:	08 95       	ret

00001208 <__fp_cmp>:
    1208:	99 0f       	add	r25, r25
    120a:	00 08       	sbc	r0, r0
    120c:	55 0f       	add	r21, r21
    120e:	aa 0b       	sbc	r26, r26
    1210:	e0 e8       	ldi	r30, 0x80	; 128
    1212:	fe ef       	ldi	r31, 0xFE	; 254
    1214:	16 16       	cp	r1, r22
    1216:	17 06       	cpc	r1, r23
    1218:	e8 07       	cpc	r30, r24
    121a:	f9 07       	cpc	r31, r25
    121c:	c0 f0       	brcs	.+48     	; 0x124e <__fp_cmp+0x46>
    121e:	12 16       	cp	r1, r18
    1220:	13 06       	cpc	r1, r19
    1222:	e4 07       	cpc	r30, r20
    1224:	f5 07       	cpc	r31, r21
    1226:	98 f0       	brcs	.+38     	; 0x124e <__fp_cmp+0x46>
    1228:	62 1b       	sub	r22, r18
    122a:	73 0b       	sbc	r23, r19
    122c:	84 0b       	sbc	r24, r20
    122e:	95 0b       	sbc	r25, r21
    1230:	39 f4       	brne	.+14     	; 0x1240 <__fp_cmp+0x38>
    1232:	0a 26       	eor	r0, r26
    1234:	61 f0       	breq	.+24     	; 0x124e <__fp_cmp+0x46>
    1236:	23 2b       	or	r18, r19
    1238:	24 2b       	or	r18, r20
    123a:	25 2b       	or	r18, r21
    123c:	21 f4       	brne	.+8      	; 0x1246 <__fp_cmp+0x3e>
    123e:	08 95       	ret
    1240:	0a 26       	eor	r0, r26
    1242:	09 f4       	brne	.+2      	; 0x1246 <__fp_cmp+0x3e>
    1244:	a1 40       	sbci	r26, 0x01	; 1
    1246:	a6 95       	lsr	r26
    1248:	8f ef       	ldi	r24, 0xFF	; 255
    124a:	81 1d       	adc	r24, r1
    124c:	81 1d       	adc	r24, r1
    124e:	08 95       	ret

00001250 <__divmodhi4>:
    1250:	97 fb       	bst	r25, 7
    1252:	07 2e       	mov	r0, r23
    1254:	16 f4       	brtc	.+4      	; 0x125a <__divmodhi4+0xa>
    1256:	00 94       	com	r0
    1258:	07 d0       	rcall	.+14     	; 0x1268 <__divmodhi4_neg1>
    125a:	77 fd       	sbrc	r23, 7
    125c:	09 d0       	rcall	.+18     	; 0x1270 <__divmodhi4_neg2>
    125e:	0e 94 3c 09 	call	0x1278	; 0x1278 <__udivmodhi4>
    1262:	07 fc       	sbrc	r0, 7
    1264:	05 d0       	rcall	.+10     	; 0x1270 <__divmodhi4_neg2>
    1266:	3e f4       	brtc	.+14     	; 0x1276 <__divmodhi4_exit>

00001268 <__divmodhi4_neg1>:
    1268:	90 95       	com	r25
    126a:	81 95       	neg	r24
    126c:	9f 4f       	sbci	r25, 0xFF	; 255
    126e:	08 95       	ret

00001270 <__divmodhi4_neg2>:
    1270:	70 95       	com	r23
    1272:	61 95       	neg	r22
    1274:	7f 4f       	sbci	r23, 0xFF	; 255

00001276 <__divmodhi4_exit>:
    1276:	08 95       	ret

00001278 <__udivmodhi4>:
    1278:	aa 1b       	sub	r26, r26
    127a:	bb 1b       	sub	r27, r27
    127c:	51 e1       	ldi	r21, 0x11	; 17
    127e:	07 c0       	rjmp	.+14     	; 0x128e <__udivmodhi4_ep>

00001280 <__udivmodhi4_loop>:
    1280:	aa 1f       	adc	r26, r26
    1282:	bb 1f       	adc	r27, r27
    1284:	a6 17       	cp	r26, r22
    1286:	b7 07       	cpc	r27, r23
    1288:	10 f0       	brcs	.+4      	; 0x128e <__udivmodhi4_ep>
    128a:	a6 1b       	sub	r26, r22
    128c:	b7 0b       	sbc	r27, r23

0000128e <__udivmodhi4_ep>:
    128e:	88 1f       	adc	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	5a 95       	dec	r21
    1294:	a9 f7       	brne	.-22     	; 0x1280 <__udivmodhi4_loop>
    1296:	80 95       	com	r24
    1298:	90 95       	com	r25
    129a:	bc 01       	movw	r22, r24
    129c:	cd 01       	movw	r24, r26
    129e:	08 95       	ret

000012a0 <calloc>:
    12a0:	0f 93       	push	r16
    12a2:	1f 93       	push	r17
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
    12a8:	86 9f       	mul	r24, r22
    12aa:	80 01       	movw	r16, r0
    12ac:	87 9f       	mul	r24, r23
    12ae:	10 0d       	add	r17, r0
    12b0:	96 9f       	mul	r25, r22
    12b2:	10 0d       	add	r17, r0
    12b4:	11 24       	eor	r1, r1
    12b6:	c8 01       	movw	r24, r16
    12b8:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <malloc>
    12bc:	ec 01       	movw	r28, r24
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	29 f0       	breq	.+10     	; 0x12cc <calloc+0x2c>
    12c2:	a8 01       	movw	r20, r16
    12c4:	60 e0       	ldi	r22, 0x00	; 0
    12c6:	70 e0       	ldi	r23, 0x00	; 0
    12c8:	0e 94 99 0a 	call	0x1532	; 0x1532 <memset>
    12cc:	ce 01       	movw	r24, r28
    12ce:	df 91       	pop	r29
    12d0:	cf 91       	pop	r28
    12d2:	1f 91       	pop	r17
    12d4:	0f 91       	pop	r16
    12d6:	08 95       	ret

000012d8 <malloc>:
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	82 30       	cpi	r24, 0x02	; 2
    12de:	91 05       	cpc	r25, r1
    12e0:	10 f4       	brcc	.+4      	; 0x12e6 <malloc+0xe>
    12e2:	82 e0       	ldi	r24, 0x02	; 2
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__flp>
    12ea:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__flp+0x1>
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	c0 e0       	ldi	r28, 0x00	; 0
    12f4:	d0 e0       	ldi	r29, 0x00	; 0
    12f6:	30 97       	sbiw	r30, 0x00	; 0
    12f8:	11 f1       	breq	.+68     	; 0x133e <malloc+0x66>
    12fa:	40 81       	ld	r20, Z
    12fc:	51 81       	ldd	r21, Z+1	; 0x01
    12fe:	48 17       	cp	r20, r24
    1300:	59 07       	cpc	r21, r25
    1302:	c0 f0       	brcs	.+48     	; 0x1334 <malloc+0x5c>
    1304:	48 17       	cp	r20, r24
    1306:	59 07       	cpc	r21, r25
    1308:	61 f4       	brne	.+24     	; 0x1322 <malloc+0x4a>
    130a:	82 81       	ldd	r24, Z+2	; 0x02
    130c:	93 81       	ldd	r25, Z+3	; 0x03
    130e:	20 97       	sbiw	r28, 0x00	; 0
    1310:	19 f0       	breq	.+6      	; 0x1318 <malloc+0x40>
    1312:	9b 83       	std	Y+3, r25	; 0x03
    1314:	8a 83       	std	Y+2, r24	; 0x02
    1316:	2b c0       	rjmp	.+86     	; 0x136e <malloc+0x96>
    1318:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <__flp+0x1>
    131c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__flp>
    1320:	26 c0       	rjmp	.+76     	; 0x136e <malloc+0x96>
    1322:	21 15       	cp	r18, r1
    1324:	31 05       	cpc	r19, r1
    1326:	19 f0       	breq	.+6      	; 0x132e <malloc+0x56>
    1328:	42 17       	cp	r20, r18
    132a:	53 07       	cpc	r21, r19
    132c:	18 f4       	brcc	.+6      	; 0x1334 <malloc+0x5c>
    132e:	9a 01       	movw	r18, r20
    1330:	be 01       	movw	r22, r28
    1332:	df 01       	movw	r26, r30
    1334:	ef 01       	movw	r28, r30
    1336:	02 80       	ldd	r0, Z+2	; 0x02
    1338:	f3 81       	ldd	r31, Z+3	; 0x03
    133a:	e0 2d       	mov	r30, r0
    133c:	dc cf       	rjmp	.-72     	; 0x12f6 <malloc+0x1e>
    133e:	21 15       	cp	r18, r1
    1340:	31 05       	cpc	r19, r1
    1342:	09 f1       	breq	.+66     	; 0x1386 <malloc+0xae>
    1344:	28 1b       	sub	r18, r24
    1346:	39 0b       	sbc	r19, r25
    1348:	24 30       	cpi	r18, 0x04	; 4
    134a:	31 05       	cpc	r19, r1
    134c:	90 f4       	brcc	.+36     	; 0x1372 <malloc+0x9a>
    134e:	12 96       	adiw	r26, 0x02	; 2
    1350:	8d 91       	ld	r24, X+
    1352:	9c 91       	ld	r25, X
    1354:	13 97       	sbiw	r26, 0x03	; 3
    1356:	61 15       	cp	r22, r1
    1358:	71 05       	cpc	r23, r1
    135a:	21 f0       	breq	.+8      	; 0x1364 <malloc+0x8c>
    135c:	fb 01       	movw	r30, r22
    135e:	93 83       	std	Z+3, r25	; 0x03
    1360:	82 83       	std	Z+2, r24	; 0x02
    1362:	04 c0       	rjmp	.+8      	; 0x136c <malloc+0x94>
    1364:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <__flp+0x1>
    1368:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__flp>
    136c:	fd 01       	movw	r30, r26
    136e:	32 96       	adiw	r30, 0x02	; 2
    1370:	44 c0       	rjmp	.+136    	; 0x13fa <malloc+0x122>
    1372:	fd 01       	movw	r30, r26
    1374:	e2 0f       	add	r30, r18
    1376:	f3 1f       	adc	r31, r19
    1378:	81 93       	st	Z+, r24
    137a:	91 93       	st	Z+, r25
    137c:	22 50       	subi	r18, 0x02	; 2
    137e:	31 09       	sbc	r19, r1
    1380:	2d 93       	st	X+, r18
    1382:	3c 93       	st	X, r19
    1384:	3a c0       	rjmp	.+116    	; 0x13fa <malloc+0x122>
    1386:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <__brkval>
    138a:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <__brkval+0x1>
    138e:	23 2b       	or	r18, r19
    1390:	41 f4       	brne	.+16     	; 0x13a2 <malloc+0xca>
    1392:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1396:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    139a:	30 93 05 02 	sts	0x0205, r19	; 0x800205 <__brkval+0x1>
    139e:	20 93 04 02 	sts	0x0204, r18	; 0x800204 <__brkval>
    13a2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    13a6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    13aa:	21 15       	cp	r18, r1
    13ac:	31 05       	cpc	r19, r1
    13ae:	41 f4       	brne	.+16     	; 0x13c0 <malloc+0xe8>
    13b0:	2d b7       	in	r18, 0x3d	; 61
    13b2:	3e b7       	in	r19, 0x3e	; 62
    13b4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    13b8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    13bc:	24 1b       	sub	r18, r20
    13be:	35 0b       	sbc	r19, r21
    13c0:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <__brkval>
    13c4:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <__brkval+0x1>
    13c8:	e2 17       	cp	r30, r18
    13ca:	f3 07       	cpc	r31, r19
    13cc:	a0 f4       	brcc	.+40     	; 0x13f6 <malloc+0x11e>
    13ce:	2e 1b       	sub	r18, r30
    13d0:	3f 0b       	sbc	r19, r31
    13d2:	28 17       	cp	r18, r24
    13d4:	39 07       	cpc	r19, r25
    13d6:	78 f0       	brcs	.+30     	; 0x13f6 <malloc+0x11e>
    13d8:	ac 01       	movw	r20, r24
    13da:	4e 5f       	subi	r20, 0xFE	; 254
    13dc:	5f 4f       	sbci	r21, 0xFF	; 255
    13de:	24 17       	cp	r18, r20
    13e0:	35 07       	cpc	r19, r21
    13e2:	48 f0       	brcs	.+18     	; 0x13f6 <malloc+0x11e>
    13e4:	4e 0f       	add	r20, r30
    13e6:	5f 1f       	adc	r21, r31
    13e8:	50 93 05 02 	sts	0x0205, r21	; 0x800205 <__brkval+0x1>
    13ec:	40 93 04 02 	sts	0x0204, r20	; 0x800204 <__brkval>
    13f0:	81 93       	st	Z+, r24
    13f2:	91 93       	st	Z+, r25
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <malloc+0x122>
    13f6:	e0 e0       	ldi	r30, 0x00	; 0
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	cf 01       	movw	r24, r30
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	08 95       	ret

00001402 <free>:
    1402:	0f 93       	push	r16
    1404:	1f 93       	push	r17
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	00 97       	sbiw	r24, 0x00	; 0
    140c:	09 f4       	brne	.+2      	; 0x1410 <free+0xe>
    140e:	8c c0       	rjmp	.+280    	; 0x1528 <free+0x126>
    1410:	fc 01       	movw	r30, r24
    1412:	32 97       	sbiw	r30, 0x02	; 2
    1414:	13 82       	std	Z+3, r1	; 0x03
    1416:	12 82       	std	Z+2, r1	; 0x02
    1418:	00 91 06 02 	lds	r16, 0x0206	; 0x800206 <__flp>
    141c:	10 91 07 02 	lds	r17, 0x0207	; 0x800207 <__flp+0x1>
    1420:	01 15       	cp	r16, r1
    1422:	11 05       	cpc	r17, r1
    1424:	81 f4       	brne	.+32     	; 0x1446 <free+0x44>
    1426:	20 81       	ld	r18, Z
    1428:	31 81       	ldd	r19, Z+1	; 0x01
    142a:	82 0f       	add	r24, r18
    142c:	93 1f       	adc	r25, r19
    142e:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <__brkval>
    1432:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <__brkval+0x1>
    1436:	28 17       	cp	r18, r24
    1438:	39 07       	cpc	r19, r25
    143a:	79 f5       	brne	.+94     	; 0x149a <free+0x98>
    143c:	f0 93 05 02 	sts	0x0205, r31	; 0x800205 <__brkval+0x1>
    1440:	e0 93 04 02 	sts	0x0204, r30	; 0x800204 <__brkval>
    1444:	71 c0       	rjmp	.+226    	; 0x1528 <free+0x126>
    1446:	d8 01       	movw	r26, r16
    1448:	40 e0       	ldi	r20, 0x00	; 0
    144a:	50 e0       	ldi	r21, 0x00	; 0
    144c:	ae 17       	cp	r26, r30
    144e:	bf 07       	cpc	r27, r31
    1450:	50 f4       	brcc	.+20     	; 0x1466 <free+0x64>
    1452:	12 96       	adiw	r26, 0x02	; 2
    1454:	2d 91       	ld	r18, X+
    1456:	3c 91       	ld	r19, X
    1458:	13 97       	sbiw	r26, 0x03	; 3
    145a:	ad 01       	movw	r20, r26
    145c:	21 15       	cp	r18, r1
    145e:	31 05       	cpc	r19, r1
    1460:	09 f1       	breq	.+66     	; 0x14a4 <free+0xa2>
    1462:	d9 01       	movw	r26, r18
    1464:	f3 cf       	rjmp	.-26     	; 0x144c <free+0x4a>
    1466:	9d 01       	movw	r18, r26
    1468:	da 01       	movw	r26, r20
    146a:	33 83       	std	Z+3, r19	; 0x03
    146c:	22 83       	std	Z+2, r18	; 0x02
    146e:	60 81       	ld	r22, Z
    1470:	71 81       	ldd	r23, Z+1	; 0x01
    1472:	86 0f       	add	r24, r22
    1474:	97 1f       	adc	r25, r23
    1476:	82 17       	cp	r24, r18
    1478:	93 07       	cpc	r25, r19
    147a:	69 f4       	brne	.+26     	; 0x1496 <free+0x94>
    147c:	ec 01       	movw	r28, r24
    147e:	28 81       	ld	r18, Y
    1480:	39 81       	ldd	r19, Y+1	; 0x01
    1482:	26 0f       	add	r18, r22
    1484:	37 1f       	adc	r19, r23
    1486:	2e 5f       	subi	r18, 0xFE	; 254
    1488:	3f 4f       	sbci	r19, 0xFF	; 255
    148a:	31 83       	std	Z+1, r19	; 0x01
    148c:	20 83       	st	Z, r18
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	9b 81       	ldd	r25, Y+3	; 0x03
    1492:	93 83       	std	Z+3, r25	; 0x03
    1494:	82 83       	std	Z+2, r24	; 0x02
    1496:	45 2b       	or	r20, r21
    1498:	29 f4       	brne	.+10     	; 0x14a4 <free+0xa2>
    149a:	f0 93 07 02 	sts	0x0207, r31	; 0x800207 <__flp+0x1>
    149e:	e0 93 06 02 	sts	0x0206, r30	; 0x800206 <__flp>
    14a2:	42 c0       	rjmp	.+132    	; 0x1528 <free+0x126>
    14a4:	13 96       	adiw	r26, 0x03	; 3
    14a6:	fc 93       	st	X, r31
    14a8:	ee 93       	st	-X, r30
    14aa:	12 97       	sbiw	r26, 0x02	; 2
    14ac:	ed 01       	movw	r28, r26
    14ae:	49 91       	ld	r20, Y+
    14b0:	59 91       	ld	r21, Y+
    14b2:	9e 01       	movw	r18, r28
    14b4:	24 0f       	add	r18, r20
    14b6:	35 1f       	adc	r19, r21
    14b8:	e2 17       	cp	r30, r18
    14ba:	f3 07       	cpc	r31, r19
    14bc:	71 f4       	brne	.+28     	; 0x14da <free+0xd8>
    14be:	80 81       	ld	r24, Z
    14c0:	91 81       	ldd	r25, Z+1	; 0x01
    14c2:	84 0f       	add	r24, r20
    14c4:	95 1f       	adc	r25, r21
    14c6:	02 96       	adiw	r24, 0x02	; 2
    14c8:	11 96       	adiw	r26, 0x01	; 1
    14ca:	9c 93       	st	X, r25
    14cc:	8e 93       	st	-X, r24
    14ce:	82 81       	ldd	r24, Z+2	; 0x02
    14d0:	93 81       	ldd	r25, Z+3	; 0x03
    14d2:	13 96       	adiw	r26, 0x03	; 3
    14d4:	9c 93       	st	X, r25
    14d6:	8e 93       	st	-X, r24
    14d8:	12 97       	sbiw	r26, 0x02	; 2
    14da:	e0 e0       	ldi	r30, 0x00	; 0
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	d8 01       	movw	r26, r16
    14e0:	12 96       	adiw	r26, 0x02	; 2
    14e2:	8d 91       	ld	r24, X+
    14e4:	9c 91       	ld	r25, X
    14e6:	13 97       	sbiw	r26, 0x03	; 3
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	19 f0       	breq	.+6      	; 0x14f2 <free+0xf0>
    14ec:	f8 01       	movw	r30, r16
    14ee:	8c 01       	movw	r16, r24
    14f0:	f6 cf       	rjmp	.-20     	; 0x14de <free+0xdc>
    14f2:	8d 91       	ld	r24, X+
    14f4:	9c 91       	ld	r25, X
    14f6:	98 01       	movw	r18, r16
    14f8:	2e 5f       	subi	r18, 0xFE	; 254
    14fa:	3f 4f       	sbci	r19, 0xFF	; 255
    14fc:	82 0f       	add	r24, r18
    14fe:	93 1f       	adc	r25, r19
    1500:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <__brkval>
    1504:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <__brkval+0x1>
    1508:	28 17       	cp	r18, r24
    150a:	39 07       	cpc	r19, r25
    150c:	69 f4       	brne	.+26     	; 0x1528 <free+0x126>
    150e:	30 97       	sbiw	r30, 0x00	; 0
    1510:	29 f4       	brne	.+10     	; 0x151c <free+0x11a>
    1512:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <__flp+0x1>
    1516:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <__flp>
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <free+0x11e>
    151c:	13 82       	std	Z+3, r1	; 0x03
    151e:	12 82       	std	Z+2, r1	; 0x02
    1520:	10 93 05 02 	sts	0x0205, r17	; 0x800205 <__brkval+0x1>
    1524:	00 93 04 02 	sts	0x0204, r16	; 0x800204 <__brkval>
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	1f 91       	pop	r17
    152e:	0f 91       	pop	r16
    1530:	08 95       	ret

00001532 <memset>:
    1532:	dc 01       	movw	r26, r24
    1534:	01 c0       	rjmp	.+2      	; 0x1538 <memset+0x6>
    1536:	6d 93       	st	X+, r22
    1538:	41 50       	subi	r20, 0x01	; 1
    153a:	50 40       	sbci	r21, 0x00	; 0
    153c:	e0 f7       	brcc	.-8      	; 0x1536 <memset+0x4>
    153e:	08 95       	ret

00001540 <strcmp>:
    1540:	fb 01       	movw	r30, r22
    1542:	dc 01       	movw	r26, r24
    1544:	8d 91       	ld	r24, X+
    1546:	01 90       	ld	r0, Z+
    1548:	80 19       	sub	r24, r0
    154a:	01 10       	cpse	r0, r1
    154c:	d9 f3       	breq	.-10     	; 0x1544 <strcmp+0x4>
    154e:	99 0b       	sbc	r25, r25
    1550:	08 95       	ret

00001552 <strcpy>:
    1552:	fb 01       	movw	r30, r22
    1554:	dc 01       	movw	r26, r24
    1556:	01 90       	ld	r0, Z+
    1558:	0d 92       	st	X+, r0
    155a:	00 20       	and	r0, r0
    155c:	e1 f7       	brne	.-8      	; 0x1556 <strcpy+0x4>
    155e:	08 95       	ret

00001560 <printf>:
    1560:	a0 e0       	ldi	r26, 0x00	; 0
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e6 eb       	ldi	r30, 0xB6	; 182
    1566:	fa e0       	ldi	r31, 0x0A	; 10
    1568:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__prologue_saves__+0x20>
    156c:	ae 01       	movw	r20, r28
    156e:	4b 5f       	subi	r20, 0xFB	; 251
    1570:	5f 4f       	sbci	r21, 0xFF	; 255
    1572:	fa 01       	movw	r30, r20
    1574:	61 91       	ld	r22, Z+
    1576:	71 91       	ld	r23, Z+
    1578:	af 01       	movw	r20, r30
    157a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__iob+0x2>
    157e:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <__iob+0x3>
    1582:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <vfprintf>
    1586:	e2 e0       	ldi	r30, 0x02	; 2
    1588:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__epilogue_restores__+0x20>

0000158c <putchar>:
    158c:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <__iob+0x2>
    1590:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <__iob+0x3>
    1594:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <fputc>
    1598:	08 95       	ret

0000159a <puts>:
    159a:	0f 93       	push	r16
    159c:	1f 93       	push	r17
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    15a2:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <__iob+0x2>
    15a6:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <__iob+0x3>
    15aa:	23 81       	ldd	r18, Z+3	; 0x03
    15ac:	21 ff       	sbrs	r18, 1
    15ae:	1b c0       	rjmp	.+54     	; 0x15e6 <puts+0x4c>
    15b0:	8c 01       	movw	r16, r24
    15b2:	d0 e0       	ldi	r29, 0x00	; 0
    15b4:	c0 e0       	ldi	r28, 0x00	; 0
    15b6:	f8 01       	movw	r30, r16
    15b8:	81 91       	ld	r24, Z+
    15ba:	8f 01       	movw	r16, r30
    15bc:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <__iob+0x2>
    15c0:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <__iob+0x3>
    15c4:	db 01       	movw	r26, r22
    15c6:	18 96       	adiw	r26, 0x08	; 8
    15c8:	ed 91       	ld	r30, X+
    15ca:	fc 91       	ld	r31, X
    15cc:	19 97       	sbiw	r26, 0x09	; 9
    15ce:	88 23       	and	r24, r24
    15d0:	31 f0       	breq	.+12     	; 0x15de <puts+0x44>
    15d2:	09 95       	icall
    15d4:	89 2b       	or	r24, r25
    15d6:	79 f3       	breq	.-34     	; 0x15b6 <puts+0x1c>
    15d8:	df ef       	ldi	r29, 0xFF	; 255
    15da:	cf ef       	ldi	r28, 0xFF	; 255
    15dc:	ec cf       	rjmp	.-40     	; 0x15b6 <puts+0x1c>
    15de:	8a e0       	ldi	r24, 0x0A	; 10
    15e0:	09 95       	icall
    15e2:	89 2b       	or	r24, r25
    15e4:	19 f0       	breq	.+6      	; 0x15ec <puts+0x52>
    15e6:	8f ef       	ldi	r24, 0xFF	; 255
    15e8:	9f ef       	ldi	r25, 0xFF	; 255
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <puts+0x56>
    15ec:	8d 2f       	mov	r24, r29
    15ee:	9c 2f       	mov	r25, r28
    15f0:	df 91       	pop	r29
    15f2:	cf 91       	pop	r28
    15f4:	1f 91       	pop	r17
    15f6:	0f 91       	pop	r16
    15f8:	08 95       	ret

000015fa <vfprintf>:
    15fa:	ac e0       	ldi	r26, 0x0C	; 12
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e3 e0       	ldi	r30, 0x03	; 3
    1600:	fb e0       	ldi	r31, 0x0B	; 11
    1602:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__prologue_saves__>
    1606:	7c 01       	movw	r14, r24
    1608:	6b 01       	movw	r12, r22
    160a:	8a 01       	movw	r16, r20
    160c:	fc 01       	movw	r30, r24
    160e:	17 82       	std	Z+7, r1	; 0x07
    1610:	16 82       	std	Z+6, r1	; 0x06
    1612:	83 81       	ldd	r24, Z+3	; 0x03
    1614:	81 ff       	sbrs	r24, 1
    1616:	bd c1       	rjmp	.+890    	; 0x1992 <vfprintf+0x398>
    1618:	ce 01       	movw	r24, r28
    161a:	01 96       	adiw	r24, 0x01	; 1
    161c:	4c 01       	movw	r8, r24
    161e:	f7 01       	movw	r30, r14
    1620:	93 81       	ldd	r25, Z+3	; 0x03
    1622:	f6 01       	movw	r30, r12
    1624:	93 fd       	sbrc	r25, 3
    1626:	85 91       	lpm	r24, Z+
    1628:	93 ff       	sbrs	r25, 3
    162a:	81 91       	ld	r24, Z+
    162c:	6f 01       	movw	r12, r30
    162e:	88 23       	and	r24, r24
    1630:	09 f4       	brne	.+2      	; 0x1634 <vfprintf+0x3a>
    1632:	ab c1       	rjmp	.+854    	; 0x198a <vfprintf+0x390>
    1634:	85 32       	cpi	r24, 0x25	; 37
    1636:	39 f4       	brne	.+14     	; 0x1646 <vfprintf+0x4c>
    1638:	93 fd       	sbrc	r25, 3
    163a:	85 91       	lpm	r24, Z+
    163c:	93 ff       	sbrs	r25, 3
    163e:	81 91       	ld	r24, Z+
    1640:	6f 01       	movw	r12, r30
    1642:	85 32       	cpi	r24, 0x25	; 37
    1644:	29 f4       	brne	.+10     	; 0x1650 <vfprintf+0x56>
    1646:	b7 01       	movw	r22, r14
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <fputc>
    164e:	e7 cf       	rjmp	.-50     	; 0x161e <vfprintf+0x24>
    1650:	51 2c       	mov	r5, r1
    1652:	31 2c       	mov	r3, r1
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	20 32       	cpi	r18, 0x20	; 32
    1658:	a0 f4       	brcc	.+40     	; 0x1682 <vfprintf+0x88>
    165a:	8b 32       	cpi	r24, 0x2B	; 43
    165c:	69 f0       	breq	.+26     	; 0x1678 <vfprintf+0x7e>
    165e:	30 f4       	brcc	.+12     	; 0x166c <vfprintf+0x72>
    1660:	80 32       	cpi	r24, 0x20	; 32
    1662:	59 f0       	breq	.+22     	; 0x167a <vfprintf+0x80>
    1664:	83 32       	cpi	r24, 0x23	; 35
    1666:	69 f4       	brne	.+26     	; 0x1682 <vfprintf+0x88>
    1668:	20 61       	ori	r18, 0x10	; 16
    166a:	2c c0       	rjmp	.+88     	; 0x16c4 <vfprintf+0xca>
    166c:	8d 32       	cpi	r24, 0x2D	; 45
    166e:	39 f0       	breq	.+14     	; 0x167e <vfprintf+0x84>
    1670:	80 33       	cpi	r24, 0x30	; 48
    1672:	39 f4       	brne	.+14     	; 0x1682 <vfprintf+0x88>
    1674:	21 60       	ori	r18, 0x01	; 1
    1676:	26 c0       	rjmp	.+76     	; 0x16c4 <vfprintf+0xca>
    1678:	22 60       	ori	r18, 0x02	; 2
    167a:	24 60       	ori	r18, 0x04	; 4
    167c:	23 c0       	rjmp	.+70     	; 0x16c4 <vfprintf+0xca>
    167e:	28 60       	ori	r18, 0x08	; 8
    1680:	21 c0       	rjmp	.+66     	; 0x16c4 <vfprintf+0xca>
    1682:	27 fd       	sbrc	r18, 7
    1684:	27 c0       	rjmp	.+78     	; 0x16d4 <vfprintf+0xda>
    1686:	30 ed       	ldi	r19, 0xD0	; 208
    1688:	38 0f       	add	r19, r24
    168a:	3a 30       	cpi	r19, 0x0A	; 10
    168c:	78 f4       	brcc	.+30     	; 0x16ac <vfprintf+0xb2>
    168e:	26 ff       	sbrs	r18, 6
    1690:	06 c0       	rjmp	.+12     	; 0x169e <vfprintf+0xa4>
    1692:	fa e0       	ldi	r31, 0x0A	; 10
    1694:	5f 9e       	mul	r5, r31
    1696:	30 0d       	add	r19, r0
    1698:	11 24       	eor	r1, r1
    169a:	53 2e       	mov	r5, r19
    169c:	13 c0       	rjmp	.+38     	; 0x16c4 <vfprintf+0xca>
    169e:	8a e0       	ldi	r24, 0x0A	; 10
    16a0:	38 9e       	mul	r3, r24
    16a2:	30 0d       	add	r19, r0
    16a4:	11 24       	eor	r1, r1
    16a6:	33 2e       	mov	r3, r19
    16a8:	20 62       	ori	r18, 0x20	; 32
    16aa:	0c c0       	rjmp	.+24     	; 0x16c4 <vfprintf+0xca>
    16ac:	8e 32       	cpi	r24, 0x2E	; 46
    16ae:	21 f4       	brne	.+8      	; 0x16b8 <vfprintf+0xbe>
    16b0:	26 fd       	sbrc	r18, 6
    16b2:	6b c1       	rjmp	.+726    	; 0x198a <vfprintf+0x390>
    16b4:	20 64       	ori	r18, 0x40	; 64
    16b6:	06 c0       	rjmp	.+12     	; 0x16c4 <vfprintf+0xca>
    16b8:	8c 36       	cpi	r24, 0x6C	; 108
    16ba:	11 f4       	brne	.+4      	; 0x16c0 <vfprintf+0xc6>
    16bc:	20 68       	ori	r18, 0x80	; 128
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <vfprintf+0xca>
    16c0:	88 36       	cpi	r24, 0x68	; 104
    16c2:	41 f4       	brne	.+16     	; 0x16d4 <vfprintf+0xda>
    16c4:	f6 01       	movw	r30, r12
    16c6:	93 fd       	sbrc	r25, 3
    16c8:	85 91       	lpm	r24, Z+
    16ca:	93 ff       	sbrs	r25, 3
    16cc:	81 91       	ld	r24, Z+
    16ce:	6f 01       	movw	r12, r30
    16d0:	81 11       	cpse	r24, r1
    16d2:	c1 cf       	rjmp	.-126    	; 0x1656 <vfprintf+0x5c>
    16d4:	98 2f       	mov	r25, r24
    16d6:	9f 7d       	andi	r25, 0xDF	; 223
    16d8:	95 54       	subi	r25, 0x45	; 69
    16da:	93 30       	cpi	r25, 0x03	; 3
    16dc:	28 f4       	brcc	.+10     	; 0x16e8 <vfprintf+0xee>
    16de:	0c 5f       	subi	r16, 0xFC	; 252
    16e0:	1f 4f       	sbci	r17, 0xFF	; 255
    16e2:	ff e3       	ldi	r31, 0x3F	; 63
    16e4:	f9 83       	std	Y+1, r31	; 0x01
    16e6:	0d c0       	rjmp	.+26     	; 0x1702 <vfprintf+0x108>
    16e8:	83 36       	cpi	r24, 0x63	; 99
    16ea:	31 f0       	breq	.+12     	; 0x16f8 <vfprintf+0xfe>
    16ec:	83 37       	cpi	r24, 0x73	; 115
    16ee:	71 f0       	breq	.+28     	; 0x170c <vfprintf+0x112>
    16f0:	83 35       	cpi	r24, 0x53	; 83
    16f2:	09 f0       	breq	.+2      	; 0x16f6 <vfprintf+0xfc>
    16f4:	5b c0       	rjmp	.+182    	; 0x17ac <vfprintf+0x1b2>
    16f6:	22 c0       	rjmp	.+68     	; 0x173c <vfprintf+0x142>
    16f8:	f8 01       	movw	r30, r16
    16fa:	80 81       	ld	r24, Z
    16fc:	89 83       	std	Y+1, r24	; 0x01
    16fe:	0e 5f       	subi	r16, 0xFE	; 254
    1700:	1f 4f       	sbci	r17, 0xFF	; 255
    1702:	44 24       	eor	r4, r4
    1704:	43 94       	inc	r4
    1706:	51 2c       	mov	r5, r1
    1708:	54 01       	movw	r10, r8
    170a:	15 c0       	rjmp	.+42     	; 0x1736 <vfprintf+0x13c>
    170c:	38 01       	movw	r6, r16
    170e:	f2 e0       	ldi	r31, 0x02	; 2
    1710:	6f 0e       	add	r6, r31
    1712:	71 1c       	adc	r7, r1
    1714:	f8 01       	movw	r30, r16
    1716:	a0 80       	ld	r10, Z
    1718:	b1 80       	ldd	r11, Z+1	; 0x01
    171a:	26 ff       	sbrs	r18, 6
    171c:	03 c0       	rjmp	.+6      	; 0x1724 <vfprintf+0x12a>
    171e:	65 2d       	mov	r22, r5
    1720:	70 e0       	ldi	r23, 0x00	; 0
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <vfprintf+0x12e>
    1724:	6f ef       	ldi	r22, 0xFF	; 255
    1726:	7f ef       	ldi	r23, 0xFF	; 255
    1728:	c5 01       	movw	r24, r10
    172a:	2c 87       	std	Y+12, r18	; 0x0c
    172c:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <strnlen>
    1730:	2c 01       	movw	r4, r24
    1732:	83 01       	movw	r16, r6
    1734:	2c 85       	ldd	r18, Y+12	; 0x0c
    1736:	2f 77       	andi	r18, 0x7F	; 127
    1738:	22 2e       	mov	r2, r18
    173a:	17 c0       	rjmp	.+46     	; 0x176a <vfprintf+0x170>
    173c:	38 01       	movw	r6, r16
    173e:	f2 e0       	ldi	r31, 0x02	; 2
    1740:	6f 0e       	add	r6, r31
    1742:	71 1c       	adc	r7, r1
    1744:	f8 01       	movw	r30, r16
    1746:	a0 80       	ld	r10, Z
    1748:	b1 80       	ldd	r11, Z+1	; 0x01
    174a:	26 ff       	sbrs	r18, 6
    174c:	03 c0       	rjmp	.+6      	; 0x1754 <vfprintf+0x15a>
    174e:	65 2d       	mov	r22, r5
    1750:	70 e0       	ldi	r23, 0x00	; 0
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <vfprintf+0x15e>
    1754:	6f ef       	ldi	r22, 0xFF	; 255
    1756:	7f ef       	ldi	r23, 0xFF	; 255
    1758:	c5 01       	movw	r24, r10
    175a:	2c 87       	std	Y+12, r18	; 0x0c
    175c:	0e 94 cf 0c 	call	0x199e	; 0x199e <strnlen_P>
    1760:	2c 01       	movw	r4, r24
    1762:	2c 85       	ldd	r18, Y+12	; 0x0c
    1764:	20 68       	ori	r18, 0x80	; 128
    1766:	22 2e       	mov	r2, r18
    1768:	83 01       	movw	r16, r6
    176a:	23 fc       	sbrc	r2, 3
    176c:	1b c0       	rjmp	.+54     	; 0x17a4 <vfprintf+0x1aa>
    176e:	83 2d       	mov	r24, r3
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	48 16       	cp	r4, r24
    1774:	59 06       	cpc	r5, r25
    1776:	b0 f4       	brcc	.+44     	; 0x17a4 <vfprintf+0x1aa>
    1778:	b7 01       	movw	r22, r14
    177a:	80 e2       	ldi	r24, 0x20	; 32
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <fputc>
    1782:	3a 94       	dec	r3
    1784:	f4 cf       	rjmp	.-24     	; 0x176e <vfprintf+0x174>
    1786:	f5 01       	movw	r30, r10
    1788:	27 fc       	sbrc	r2, 7
    178a:	85 91       	lpm	r24, Z+
    178c:	27 fe       	sbrs	r2, 7
    178e:	81 91       	ld	r24, Z+
    1790:	5f 01       	movw	r10, r30
    1792:	b7 01       	movw	r22, r14
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <fputc>
    179a:	31 10       	cpse	r3, r1
    179c:	3a 94       	dec	r3
    179e:	f1 e0       	ldi	r31, 0x01	; 1
    17a0:	4f 1a       	sub	r4, r31
    17a2:	51 08       	sbc	r5, r1
    17a4:	41 14       	cp	r4, r1
    17a6:	51 04       	cpc	r5, r1
    17a8:	71 f7       	brne	.-36     	; 0x1786 <vfprintf+0x18c>
    17aa:	e5 c0       	rjmp	.+458    	; 0x1976 <vfprintf+0x37c>
    17ac:	84 36       	cpi	r24, 0x64	; 100
    17ae:	11 f0       	breq	.+4      	; 0x17b4 <vfprintf+0x1ba>
    17b0:	89 36       	cpi	r24, 0x69	; 105
    17b2:	39 f5       	brne	.+78     	; 0x1802 <vfprintf+0x208>
    17b4:	f8 01       	movw	r30, r16
    17b6:	27 ff       	sbrs	r18, 7
    17b8:	07 c0       	rjmp	.+14     	; 0x17c8 <vfprintf+0x1ce>
    17ba:	60 81       	ld	r22, Z
    17bc:	71 81       	ldd	r23, Z+1	; 0x01
    17be:	82 81       	ldd	r24, Z+2	; 0x02
    17c0:	93 81       	ldd	r25, Z+3	; 0x03
    17c2:	0c 5f       	subi	r16, 0xFC	; 252
    17c4:	1f 4f       	sbci	r17, 0xFF	; 255
    17c6:	08 c0       	rjmp	.+16     	; 0x17d8 <vfprintf+0x1de>
    17c8:	60 81       	ld	r22, Z
    17ca:	71 81       	ldd	r23, Z+1	; 0x01
    17cc:	07 2e       	mov	r0, r23
    17ce:	00 0c       	add	r0, r0
    17d0:	88 0b       	sbc	r24, r24
    17d2:	99 0b       	sbc	r25, r25
    17d4:	0e 5f       	subi	r16, 0xFE	; 254
    17d6:	1f 4f       	sbci	r17, 0xFF	; 255
    17d8:	2f 76       	andi	r18, 0x6F	; 111
    17da:	72 2e       	mov	r7, r18
    17dc:	97 ff       	sbrs	r25, 7
    17de:	09 c0       	rjmp	.+18     	; 0x17f2 <vfprintf+0x1f8>
    17e0:	90 95       	com	r25
    17e2:	80 95       	com	r24
    17e4:	70 95       	com	r23
    17e6:	61 95       	neg	r22
    17e8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ea:	8f 4f       	sbci	r24, 0xFF	; 255
    17ec:	9f 4f       	sbci	r25, 0xFF	; 255
    17ee:	20 68       	ori	r18, 0x80	; 128
    17f0:	72 2e       	mov	r7, r18
    17f2:	2a e0       	ldi	r18, 0x0A	; 10
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	a4 01       	movw	r20, r8
    17f8:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__ultoa_invert>
    17fc:	a8 2e       	mov	r10, r24
    17fe:	a8 18       	sub	r10, r8
    1800:	44 c0       	rjmp	.+136    	; 0x188a <vfprintf+0x290>
    1802:	85 37       	cpi	r24, 0x75	; 117
    1804:	29 f4       	brne	.+10     	; 0x1810 <vfprintf+0x216>
    1806:	2f 7e       	andi	r18, 0xEF	; 239
    1808:	b2 2e       	mov	r11, r18
    180a:	2a e0       	ldi	r18, 0x0A	; 10
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	25 c0       	rjmp	.+74     	; 0x185a <vfprintf+0x260>
    1810:	f2 2f       	mov	r31, r18
    1812:	f9 7f       	andi	r31, 0xF9	; 249
    1814:	bf 2e       	mov	r11, r31
    1816:	8f 36       	cpi	r24, 0x6F	; 111
    1818:	c1 f0       	breq	.+48     	; 0x184a <vfprintf+0x250>
    181a:	18 f4       	brcc	.+6      	; 0x1822 <vfprintf+0x228>
    181c:	88 35       	cpi	r24, 0x58	; 88
    181e:	79 f0       	breq	.+30     	; 0x183e <vfprintf+0x244>
    1820:	b4 c0       	rjmp	.+360    	; 0x198a <vfprintf+0x390>
    1822:	80 37       	cpi	r24, 0x70	; 112
    1824:	19 f0       	breq	.+6      	; 0x182c <vfprintf+0x232>
    1826:	88 37       	cpi	r24, 0x78	; 120
    1828:	21 f0       	breq	.+8      	; 0x1832 <vfprintf+0x238>
    182a:	af c0       	rjmp	.+350    	; 0x198a <vfprintf+0x390>
    182c:	2f 2f       	mov	r18, r31
    182e:	20 61       	ori	r18, 0x10	; 16
    1830:	b2 2e       	mov	r11, r18
    1832:	b4 fe       	sbrs	r11, 4
    1834:	0d c0       	rjmp	.+26     	; 0x1850 <vfprintf+0x256>
    1836:	8b 2d       	mov	r24, r11
    1838:	84 60       	ori	r24, 0x04	; 4
    183a:	b8 2e       	mov	r11, r24
    183c:	09 c0       	rjmp	.+18     	; 0x1850 <vfprintf+0x256>
    183e:	24 ff       	sbrs	r18, 4
    1840:	0a c0       	rjmp	.+20     	; 0x1856 <vfprintf+0x25c>
    1842:	9f 2f       	mov	r25, r31
    1844:	96 60       	ori	r25, 0x06	; 6
    1846:	b9 2e       	mov	r11, r25
    1848:	06 c0       	rjmp	.+12     	; 0x1856 <vfprintf+0x25c>
    184a:	28 e0       	ldi	r18, 0x08	; 8
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	05 c0       	rjmp	.+10     	; 0x185a <vfprintf+0x260>
    1850:	20 e1       	ldi	r18, 0x10	; 16
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	02 c0       	rjmp	.+4      	; 0x185a <vfprintf+0x260>
    1856:	20 e1       	ldi	r18, 0x10	; 16
    1858:	32 e0       	ldi	r19, 0x02	; 2
    185a:	f8 01       	movw	r30, r16
    185c:	b7 fe       	sbrs	r11, 7
    185e:	07 c0       	rjmp	.+14     	; 0x186e <vfprintf+0x274>
    1860:	60 81       	ld	r22, Z
    1862:	71 81       	ldd	r23, Z+1	; 0x01
    1864:	82 81       	ldd	r24, Z+2	; 0x02
    1866:	93 81       	ldd	r25, Z+3	; 0x03
    1868:	0c 5f       	subi	r16, 0xFC	; 252
    186a:	1f 4f       	sbci	r17, 0xFF	; 255
    186c:	06 c0       	rjmp	.+12     	; 0x187a <vfprintf+0x280>
    186e:	60 81       	ld	r22, Z
    1870:	71 81       	ldd	r23, Z+1	; 0x01
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	0e 5f       	subi	r16, 0xFE	; 254
    1878:	1f 4f       	sbci	r17, 0xFF	; 255
    187a:	a4 01       	movw	r20, r8
    187c:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__ultoa_invert>
    1880:	a8 2e       	mov	r10, r24
    1882:	a8 18       	sub	r10, r8
    1884:	fb 2d       	mov	r31, r11
    1886:	ff 77       	andi	r31, 0x7F	; 127
    1888:	7f 2e       	mov	r7, r31
    188a:	76 fe       	sbrs	r7, 6
    188c:	0b c0       	rjmp	.+22     	; 0x18a4 <vfprintf+0x2aa>
    188e:	37 2d       	mov	r19, r7
    1890:	3e 7f       	andi	r19, 0xFE	; 254
    1892:	a5 14       	cp	r10, r5
    1894:	50 f4       	brcc	.+20     	; 0x18aa <vfprintf+0x2b0>
    1896:	74 fe       	sbrs	r7, 4
    1898:	0a c0       	rjmp	.+20     	; 0x18ae <vfprintf+0x2b4>
    189a:	72 fc       	sbrc	r7, 2
    189c:	08 c0       	rjmp	.+16     	; 0x18ae <vfprintf+0x2b4>
    189e:	37 2d       	mov	r19, r7
    18a0:	3e 7e       	andi	r19, 0xEE	; 238
    18a2:	05 c0       	rjmp	.+10     	; 0x18ae <vfprintf+0x2b4>
    18a4:	ba 2c       	mov	r11, r10
    18a6:	37 2d       	mov	r19, r7
    18a8:	03 c0       	rjmp	.+6      	; 0x18b0 <vfprintf+0x2b6>
    18aa:	ba 2c       	mov	r11, r10
    18ac:	01 c0       	rjmp	.+2      	; 0x18b0 <vfprintf+0x2b6>
    18ae:	b5 2c       	mov	r11, r5
    18b0:	34 ff       	sbrs	r19, 4
    18b2:	0d c0       	rjmp	.+26     	; 0x18ce <vfprintf+0x2d4>
    18b4:	fe 01       	movw	r30, r28
    18b6:	ea 0d       	add	r30, r10
    18b8:	f1 1d       	adc	r31, r1
    18ba:	80 81       	ld	r24, Z
    18bc:	80 33       	cpi	r24, 0x30	; 48
    18be:	11 f4       	brne	.+4      	; 0x18c4 <vfprintf+0x2ca>
    18c0:	39 7e       	andi	r19, 0xE9	; 233
    18c2:	09 c0       	rjmp	.+18     	; 0x18d6 <vfprintf+0x2dc>
    18c4:	32 ff       	sbrs	r19, 2
    18c6:	06 c0       	rjmp	.+12     	; 0x18d4 <vfprintf+0x2da>
    18c8:	b3 94       	inc	r11
    18ca:	b3 94       	inc	r11
    18cc:	04 c0       	rjmp	.+8      	; 0x18d6 <vfprintf+0x2dc>
    18ce:	83 2f       	mov	r24, r19
    18d0:	86 78       	andi	r24, 0x86	; 134
    18d2:	09 f0       	breq	.+2      	; 0x18d6 <vfprintf+0x2dc>
    18d4:	b3 94       	inc	r11
    18d6:	33 fd       	sbrc	r19, 3
    18d8:	13 c0       	rjmp	.+38     	; 0x1900 <vfprintf+0x306>
    18da:	30 ff       	sbrs	r19, 0
    18dc:	06 c0       	rjmp	.+12     	; 0x18ea <vfprintf+0x2f0>
    18de:	5a 2c       	mov	r5, r10
    18e0:	b3 14       	cp	r11, r3
    18e2:	18 f4       	brcc	.+6      	; 0x18ea <vfprintf+0x2f0>
    18e4:	53 0c       	add	r5, r3
    18e6:	5b 18       	sub	r5, r11
    18e8:	b3 2c       	mov	r11, r3
    18ea:	b3 14       	cp	r11, r3
    18ec:	68 f4       	brcc	.+26     	; 0x1908 <vfprintf+0x30e>
    18ee:	b7 01       	movw	r22, r14
    18f0:	80 e2       	ldi	r24, 0x20	; 32
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	3c 87       	std	Y+12, r19	; 0x0c
    18f6:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <fputc>
    18fa:	b3 94       	inc	r11
    18fc:	3c 85       	ldd	r19, Y+12	; 0x0c
    18fe:	f5 cf       	rjmp	.-22     	; 0x18ea <vfprintf+0x2f0>
    1900:	b3 14       	cp	r11, r3
    1902:	10 f4       	brcc	.+4      	; 0x1908 <vfprintf+0x30e>
    1904:	3b 18       	sub	r3, r11
    1906:	01 c0       	rjmp	.+2      	; 0x190a <vfprintf+0x310>
    1908:	31 2c       	mov	r3, r1
    190a:	34 ff       	sbrs	r19, 4
    190c:	12 c0       	rjmp	.+36     	; 0x1932 <vfprintf+0x338>
    190e:	b7 01       	movw	r22, r14
    1910:	80 e3       	ldi	r24, 0x30	; 48
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	3c 87       	std	Y+12, r19	; 0x0c
    1916:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <fputc>
    191a:	3c 85       	ldd	r19, Y+12	; 0x0c
    191c:	32 ff       	sbrs	r19, 2
    191e:	17 c0       	rjmp	.+46     	; 0x194e <vfprintf+0x354>
    1920:	31 fd       	sbrc	r19, 1
    1922:	03 c0       	rjmp	.+6      	; 0x192a <vfprintf+0x330>
    1924:	88 e7       	ldi	r24, 0x78	; 120
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	02 c0       	rjmp	.+4      	; 0x192e <vfprintf+0x334>
    192a:	88 e5       	ldi	r24, 0x58	; 88
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	b7 01       	movw	r22, r14
    1930:	0c c0       	rjmp	.+24     	; 0x194a <vfprintf+0x350>
    1932:	83 2f       	mov	r24, r19
    1934:	86 78       	andi	r24, 0x86	; 134
    1936:	59 f0       	breq	.+22     	; 0x194e <vfprintf+0x354>
    1938:	31 ff       	sbrs	r19, 1
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <vfprintf+0x346>
    193c:	8b e2       	ldi	r24, 0x2B	; 43
    193e:	01 c0       	rjmp	.+2      	; 0x1942 <vfprintf+0x348>
    1940:	80 e2       	ldi	r24, 0x20	; 32
    1942:	37 fd       	sbrc	r19, 7
    1944:	8d e2       	ldi	r24, 0x2D	; 45
    1946:	b7 01       	movw	r22, r14
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <fputc>
    194e:	a5 14       	cp	r10, r5
    1950:	38 f4       	brcc	.+14     	; 0x1960 <vfprintf+0x366>
    1952:	b7 01       	movw	r22, r14
    1954:	80 e3       	ldi	r24, 0x30	; 48
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <fputc>
    195c:	5a 94       	dec	r5
    195e:	f7 cf       	rjmp	.-18     	; 0x194e <vfprintf+0x354>
    1960:	aa 94       	dec	r10
    1962:	f4 01       	movw	r30, r8
    1964:	ea 0d       	add	r30, r10
    1966:	f1 1d       	adc	r31, r1
    1968:	80 81       	ld	r24, Z
    196a:	b7 01       	movw	r22, r14
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <fputc>
    1972:	a1 10       	cpse	r10, r1
    1974:	f5 cf       	rjmp	.-22     	; 0x1960 <vfprintf+0x366>
    1976:	33 20       	and	r3, r3
    1978:	09 f4       	brne	.+2      	; 0x197c <vfprintf+0x382>
    197a:	51 ce       	rjmp	.-862    	; 0x161e <vfprintf+0x24>
    197c:	b7 01       	movw	r22, r14
    197e:	80 e2       	ldi	r24, 0x20	; 32
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <fputc>
    1986:	3a 94       	dec	r3
    1988:	f6 cf       	rjmp	.-20     	; 0x1976 <vfprintf+0x37c>
    198a:	f7 01       	movw	r30, r14
    198c:	86 81       	ldd	r24, Z+6	; 0x06
    198e:	97 81       	ldd	r25, Z+7	; 0x07
    1990:	02 c0       	rjmp	.+4      	; 0x1996 <vfprintf+0x39c>
    1992:	8f ef       	ldi	r24, 0xFF	; 255
    1994:	9f ef       	ldi	r25, 0xFF	; 255
    1996:	2c 96       	adiw	r28, 0x0c	; 12
    1998:	e2 e1       	ldi	r30, 0x12	; 18
    199a:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <__epilogue_restores__>

0000199e <strnlen_P>:
    199e:	fc 01       	movw	r30, r24
    19a0:	05 90       	lpm	r0, Z+
    19a2:	61 50       	subi	r22, 0x01	; 1
    19a4:	70 40       	sbci	r23, 0x00	; 0
    19a6:	01 10       	cpse	r0, r1
    19a8:	d8 f7       	brcc	.-10     	; 0x19a0 <strnlen_P+0x2>
    19aa:	80 95       	com	r24
    19ac:	90 95       	com	r25
    19ae:	8e 0f       	add	r24, r30
    19b0:	9f 1f       	adc	r25, r31
    19b2:	08 95       	ret

000019b4 <strnlen>:
    19b4:	fc 01       	movw	r30, r24
    19b6:	61 50       	subi	r22, 0x01	; 1
    19b8:	70 40       	sbci	r23, 0x00	; 0
    19ba:	01 90       	ld	r0, Z+
    19bc:	01 10       	cpse	r0, r1
    19be:	d8 f7       	brcc	.-10     	; 0x19b6 <strnlen+0x2>
    19c0:	80 95       	com	r24
    19c2:	90 95       	com	r25
    19c4:	8e 0f       	add	r24, r30
    19c6:	9f 1f       	adc	r25, r31
    19c8:	08 95       	ret

000019ca <fputc>:
    19ca:	0f 93       	push	r16
    19cc:	1f 93       	push	r17
    19ce:	cf 93       	push	r28
    19d0:	df 93       	push	r29
    19d2:	fb 01       	movw	r30, r22
    19d4:	23 81       	ldd	r18, Z+3	; 0x03
    19d6:	21 fd       	sbrc	r18, 1
    19d8:	03 c0       	rjmp	.+6      	; 0x19e0 <fputc+0x16>
    19da:	8f ef       	ldi	r24, 0xFF	; 255
    19dc:	9f ef       	ldi	r25, 0xFF	; 255
    19de:	28 c0       	rjmp	.+80     	; 0x1a30 <fputc+0x66>
    19e0:	22 ff       	sbrs	r18, 2
    19e2:	16 c0       	rjmp	.+44     	; 0x1a10 <fputc+0x46>
    19e4:	46 81       	ldd	r20, Z+6	; 0x06
    19e6:	57 81       	ldd	r21, Z+7	; 0x07
    19e8:	24 81       	ldd	r18, Z+4	; 0x04
    19ea:	35 81       	ldd	r19, Z+5	; 0x05
    19ec:	42 17       	cp	r20, r18
    19ee:	53 07       	cpc	r21, r19
    19f0:	44 f4       	brge	.+16     	; 0x1a02 <fputc+0x38>
    19f2:	a0 81       	ld	r26, Z
    19f4:	b1 81       	ldd	r27, Z+1	; 0x01
    19f6:	9d 01       	movw	r18, r26
    19f8:	2f 5f       	subi	r18, 0xFF	; 255
    19fa:	3f 4f       	sbci	r19, 0xFF	; 255
    19fc:	31 83       	std	Z+1, r19	; 0x01
    19fe:	20 83       	st	Z, r18
    1a00:	8c 93       	st	X, r24
    1a02:	26 81       	ldd	r18, Z+6	; 0x06
    1a04:	37 81       	ldd	r19, Z+7	; 0x07
    1a06:	2f 5f       	subi	r18, 0xFF	; 255
    1a08:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0a:	37 83       	std	Z+7, r19	; 0x07
    1a0c:	26 83       	std	Z+6, r18	; 0x06
    1a0e:	10 c0       	rjmp	.+32     	; 0x1a30 <fputc+0x66>
    1a10:	eb 01       	movw	r28, r22
    1a12:	09 2f       	mov	r16, r25
    1a14:	18 2f       	mov	r17, r24
    1a16:	00 84       	ldd	r0, Z+8	; 0x08
    1a18:	f1 85       	ldd	r31, Z+9	; 0x09
    1a1a:	e0 2d       	mov	r30, r0
    1a1c:	09 95       	icall
    1a1e:	89 2b       	or	r24, r25
    1a20:	e1 f6       	brne	.-72     	; 0x19da <fputc+0x10>
    1a22:	8e 81       	ldd	r24, Y+6	; 0x06
    1a24:	9f 81       	ldd	r25, Y+7	; 0x07
    1a26:	01 96       	adiw	r24, 0x01	; 1
    1a28:	9f 83       	std	Y+7, r25	; 0x07
    1a2a:	8e 83       	std	Y+6, r24	; 0x06
    1a2c:	81 2f       	mov	r24, r17
    1a2e:	90 2f       	mov	r25, r16
    1a30:	df 91       	pop	r29
    1a32:	cf 91       	pop	r28
    1a34:	1f 91       	pop	r17
    1a36:	0f 91       	pop	r16
    1a38:	08 95       	ret

00001a3a <__ultoa_invert>:
    1a3a:	fa 01       	movw	r30, r20
    1a3c:	aa 27       	eor	r26, r26
    1a3e:	28 30       	cpi	r18, 0x08	; 8
    1a40:	51 f1       	breq	.+84     	; 0x1a96 <__ultoa_invert+0x5c>
    1a42:	20 31       	cpi	r18, 0x10	; 16
    1a44:	81 f1       	breq	.+96     	; 0x1aa6 <__ultoa_invert+0x6c>
    1a46:	e8 94       	clt
    1a48:	6f 93       	push	r22
    1a4a:	6e 7f       	andi	r22, 0xFE	; 254
    1a4c:	6e 5f       	subi	r22, 0xFE	; 254
    1a4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a50:	8f 4f       	sbci	r24, 0xFF	; 255
    1a52:	9f 4f       	sbci	r25, 0xFF	; 255
    1a54:	af 4f       	sbci	r26, 0xFF	; 255
    1a56:	b1 e0       	ldi	r27, 0x01	; 1
    1a58:	3e d0       	rcall	.+124    	; 0x1ad6 <__ultoa_invert+0x9c>
    1a5a:	b4 e0       	ldi	r27, 0x04	; 4
    1a5c:	3c d0       	rcall	.+120    	; 0x1ad6 <__ultoa_invert+0x9c>
    1a5e:	67 0f       	add	r22, r23
    1a60:	78 1f       	adc	r23, r24
    1a62:	89 1f       	adc	r24, r25
    1a64:	9a 1f       	adc	r25, r26
    1a66:	a1 1d       	adc	r26, r1
    1a68:	68 0f       	add	r22, r24
    1a6a:	79 1f       	adc	r23, r25
    1a6c:	8a 1f       	adc	r24, r26
    1a6e:	91 1d       	adc	r25, r1
    1a70:	a1 1d       	adc	r26, r1
    1a72:	6a 0f       	add	r22, r26
    1a74:	71 1d       	adc	r23, r1
    1a76:	81 1d       	adc	r24, r1
    1a78:	91 1d       	adc	r25, r1
    1a7a:	a1 1d       	adc	r26, r1
    1a7c:	20 d0       	rcall	.+64     	; 0x1abe <__ultoa_invert+0x84>
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <__ultoa_invert+0x48>
    1a80:	68 94       	set
    1a82:	3f 91       	pop	r19
    1a84:	2a e0       	ldi	r18, 0x0A	; 10
    1a86:	26 9f       	mul	r18, r22
    1a88:	11 24       	eor	r1, r1
    1a8a:	30 19       	sub	r19, r0
    1a8c:	30 5d       	subi	r19, 0xD0	; 208
    1a8e:	31 93       	st	Z+, r19
    1a90:	de f6       	brtc	.-74     	; 0x1a48 <__ultoa_invert+0xe>
    1a92:	cf 01       	movw	r24, r30
    1a94:	08 95       	ret
    1a96:	46 2f       	mov	r20, r22
    1a98:	47 70       	andi	r20, 0x07	; 7
    1a9a:	40 5d       	subi	r20, 0xD0	; 208
    1a9c:	41 93       	st	Z+, r20
    1a9e:	b3 e0       	ldi	r27, 0x03	; 3
    1aa0:	0f d0       	rcall	.+30     	; 0x1ac0 <__ultoa_invert+0x86>
    1aa2:	c9 f7       	brne	.-14     	; 0x1a96 <__ultoa_invert+0x5c>
    1aa4:	f6 cf       	rjmp	.-20     	; 0x1a92 <__ultoa_invert+0x58>
    1aa6:	46 2f       	mov	r20, r22
    1aa8:	4f 70       	andi	r20, 0x0F	; 15
    1aaa:	40 5d       	subi	r20, 0xD0	; 208
    1aac:	4a 33       	cpi	r20, 0x3A	; 58
    1aae:	18 f0       	brcs	.+6      	; 0x1ab6 <__ultoa_invert+0x7c>
    1ab0:	49 5d       	subi	r20, 0xD9	; 217
    1ab2:	31 fd       	sbrc	r19, 1
    1ab4:	40 52       	subi	r20, 0x20	; 32
    1ab6:	41 93       	st	Z+, r20
    1ab8:	02 d0       	rcall	.+4      	; 0x1abe <__ultoa_invert+0x84>
    1aba:	a9 f7       	brne	.-22     	; 0x1aa6 <__ultoa_invert+0x6c>
    1abc:	ea cf       	rjmp	.-44     	; 0x1a92 <__ultoa_invert+0x58>
    1abe:	b4 e0       	ldi	r27, 0x04	; 4
    1ac0:	a6 95       	lsr	r26
    1ac2:	97 95       	ror	r25
    1ac4:	87 95       	ror	r24
    1ac6:	77 95       	ror	r23
    1ac8:	67 95       	ror	r22
    1aca:	ba 95       	dec	r27
    1acc:	c9 f7       	brne	.-14     	; 0x1ac0 <__ultoa_invert+0x86>
    1ace:	00 97       	sbiw	r24, 0x00	; 0
    1ad0:	61 05       	cpc	r22, r1
    1ad2:	71 05       	cpc	r23, r1
    1ad4:	08 95       	ret
    1ad6:	9b 01       	movw	r18, r22
    1ad8:	ac 01       	movw	r20, r24
    1ada:	0a 2e       	mov	r0, r26
    1adc:	06 94       	lsr	r0
    1ade:	57 95       	ror	r21
    1ae0:	47 95       	ror	r20
    1ae2:	37 95       	ror	r19
    1ae4:	27 95       	ror	r18
    1ae6:	ba 95       	dec	r27
    1ae8:	c9 f7       	brne	.-14     	; 0x1adc <__ultoa_invert+0xa2>
    1aea:	62 0f       	add	r22, r18
    1aec:	73 1f       	adc	r23, r19
    1aee:	84 1f       	adc	r24, r20
    1af0:	95 1f       	adc	r25, r21
    1af2:	a0 1d       	adc	r26, r0
    1af4:	08 95       	ret

00001af6 <__prologue_saves__>:
    1af6:	2f 92       	push	r2
    1af8:	3f 92       	push	r3
    1afa:	4f 92       	push	r4
    1afc:	5f 92       	push	r5
    1afe:	6f 92       	push	r6
    1b00:	7f 92       	push	r7
    1b02:	8f 92       	push	r8
    1b04:	9f 92       	push	r9
    1b06:	af 92       	push	r10
    1b08:	bf 92       	push	r11
    1b0a:	cf 92       	push	r12
    1b0c:	df 92       	push	r13
    1b0e:	ef 92       	push	r14
    1b10:	ff 92       	push	r15
    1b12:	0f 93       	push	r16
    1b14:	1f 93       	push	r17
    1b16:	cf 93       	push	r28
    1b18:	df 93       	push	r29
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	ca 1b       	sub	r28, r26
    1b20:	db 0b       	sbc	r29, r27
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	f8 94       	cli
    1b26:	de bf       	out	0x3e, r29	; 62
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	cd bf       	out	0x3d, r28	; 61
    1b2c:	09 94       	ijmp

00001b2e <__epilogue_restores__>:
    1b2e:	2a 88       	ldd	r2, Y+18	; 0x12
    1b30:	39 88       	ldd	r3, Y+17	; 0x11
    1b32:	48 88       	ldd	r4, Y+16	; 0x10
    1b34:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b36:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b38:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b3a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b3c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b3e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b40:	b9 84       	ldd	r11, Y+9	; 0x09
    1b42:	c8 84       	ldd	r12, Y+8	; 0x08
    1b44:	df 80       	ldd	r13, Y+7	; 0x07
    1b46:	ee 80       	ldd	r14, Y+6	; 0x06
    1b48:	fd 80       	ldd	r15, Y+5	; 0x05
    1b4a:	0c 81       	ldd	r16, Y+4	; 0x04
    1b4c:	1b 81       	ldd	r17, Y+3	; 0x03
    1b4e:	aa 81       	ldd	r26, Y+2	; 0x02
    1b50:	b9 81       	ldd	r27, Y+1	; 0x01
    1b52:	ce 0f       	add	r28, r30
    1b54:	d1 1d       	adc	r29, r1
    1b56:	0f b6       	in	r0, 0x3f	; 63
    1b58:	f8 94       	cli
    1b5a:	de bf       	out	0x3e, r29	; 62
    1b5c:	0f be       	out	0x3f, r0	; 63
    1b5e:	cd bf       	out	0x3d, r28	; 61
    1b60:	ed 01       	movw	r28, r26
    1b62:	08 95       	ret
